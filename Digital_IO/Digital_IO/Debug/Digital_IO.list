
Digital_IO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000564  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006f8  08000700  00001700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006f8  080006f8  00001700  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080006f8  080006f8  00001700  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080006f8  08000700  00001700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006f8  080006f8  000016f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006fc  080006fc  000016fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001700  2**0
                  CONTENTS
 10 .bss          00000028  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002056  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000780  00000000  00000000  00003786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  00003f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c9  00000000  00000000  00004038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000151c8  00000000  00000000  00004101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f32  00000000  00000000  000192c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00072c9f  00000000  00000000  0001b1fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008de9a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000328  00000000  00000000  0008dee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0008e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080006e0 	.word	0x080006e0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080006e0 	.word	0x080006e0

080001d4 <EXTI0_IRQHandler>:
/**
 * @brief EXTI0 interrupt handler for button press
 * This common handler checks which part is active and calls
 * the appropriate callback function.
 */
void EXTI0_IRQHandler(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
    // Check if EXTI0 interrupt occurred
    if (EXTI->PR & EXTI_PR_PR0) {
 80001da:	4b1d      	ldr	r3, [pc, #116]	@ (8000250 <EXTI0_IRQHandler+0x7c>)
 80001dc:	695b      	ldr	r3, [r3, #20]
 80001de:	f003 0301 	and.w	r3, r3, #1
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d030      	beq.n	8000248 <EXTI0_IRQHandler+0x74>
        // Flash all LEDs briefly for debugging (can be removed for final version)
        uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80001e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000254 <EXTI0_IRQHandler+0x80>)
 80001e8:	60fb      	str	r3, [r7, #12]
        uint8_t old_value = *led_register;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	72fb      	strb	r3, [r7, #11]

        *led_register = 0xFF;  // All LEDs on
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	22ff      	movs	r2, #255	@ 0xff
 80001f4:	701a      	strb	r2, [r3, #0]
        for(volatile uint32_t i = 0; i < 50000; i++);
 80001f6:	2300      	movs	r3, #0
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	e002      	b.n	8000202 <EXTI0_IRQHandler+0x2e>
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	3301      	adds	r3, #1
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000208:	4293      	cmp	r3, r2
 800020a:	d9f7      	bls.n	80001fc <EXTI0_IRQHandler+0x28>
        *led_register = 0x00;  // All LEDs off
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	2200      	movs	r2, #0
 8000210:	701a      	strb	r2, [r3, #0]
        for(volatile uint32_t i = 0; i < 50000; i++);
 8000212:	2300      	movs	r3, #0
 8000214:	603b      	str	r3, [r7, #0]
 8000216:	e002      	b.n	800021e <EXTI0_IRQHandler+0x4a>
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	3301      	adds	r3, #1
 800021c:	603b      	str	r3, [r7, #0]
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000224:	4293      	cmp	r3, r2
 8000226:	d9f7      	bls.n	8000218 <EXTI0_IRQHandler+0x44>

        // Restore previous LED state
        *led_register = old_value;
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	7afa      	ldrb	r2, [r7, #11]
 800022c:	701a      	strb	r2, [r3, #0]

        // Call the callback function if registered
        if (g_buttonCallback != NULL) {
 800022e:	4b0a      	ldr	r3, [pc, #40]	@ (8000258 <EXTI0_IRQHandler+0x84>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d002      	beq.n	800023c <EXTI0_IRQHandler+0x68>
            g_buttonCallback();
 8000236:	4b08      	ldr	r3, [pc, #32]	@ (8000258 <EXTI0_IRQHandler+0x84>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4798      	blx	r3
        }

        // Clear the interrupt flag
        EXTI->PR |= EXTI_PR_PR0;
 800023c:	4b04      	ldr	r3, [pc, #16]	@ (8000250 <EXTI0_IRQHandler+0x7c>)
 800023e:	695b      	ldr	r3, [r3, #20]
 8000240:	4a03      	ldr	r2, [pc, #12]	@ (8000250 <EXTI0_IRQHandler+0x7c>)
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	6153      	str	r3, [r2, #20]
    }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	40010400 	.word	0x40010400
 8000254:	48001015 	.word	0x48001015
 8000258:	2000001c 	.word	0x2000001c

0800025c <DigitalIO_Init>:
#include "digital_io_a.h"

/**
 * @brief Initialize the Digital I/O module
 */
void DigitalIO_Init(void) {
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
    // Enable clocks for GPIOA (button) and GPIOE (LEDs)
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOEEN;
 8000262:	4b13      	ldr	r3, [pc, #76]	@ (80002b0 <DigitalIO_Init+0x54>)
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	4a12      	ldr	r2, [pc, #72]	@ (80002b0 <DigitalIO_Init+0x54>)
 8000268:	f443 1308 	orr.w	r3, r3, #2228224	@ 0x220000
 800026c:	6153      	str	r3, [r2, #20]

    // Configure PE8-PE15 (LEDs) as outputs
    uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 800026e:	4b11      	ldr	r3, [pc, #68]	@ (80002b4 <DigitalIO_Init+0x58>)
 8000270:	607b      	str	r3, [r7, #4]
    *led_output_registers = 0x5555; // Set as outputs (01 pattern for each pin)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000278:	801a      	strh	r2, [r3, #0]

    // Configure PA0 (User button) as input (default state)

    // Configure with pull-down (button connects to VDD when pressed)
    GPIOA->PUPDR &= ~(0x3);
 800027a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800027e:	68db      	ldr	r3, [r3, #12]
 8000280:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000284:	f023 0303 	bic.w	r3, r3, #3
 8000288:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= 0x2; // Pull-down (10 pattern)
 800028a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000294:	f043 0302 	orr.w	r3, r3, #2
 8000298:	60d3      	str	r3, [r2, #12]

    // Turn off all LEDs initially
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800029a:	4b07      	ldr	r3, [pc, #28]	@ (80002b8 <DigitalIO_Init+0x5c>)
 800029c:	603b      	str	r3, [r7, #0]
    *led_register = 0;
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	2200      	movs	r2, #0
 80002a2:	701a      	strb	r2, [r3, #0]
}
 80002a4:	bf00      	nop
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	40021000 	.word	0x40021000
 80002b4:	48001002 	.word	0x48001002
 80002b8:	48001015 	.word	0x48001015

080002bc <DigitalIO_SetLED>:

/**
 * @brief Set the state of a specific LED
 */
void DigitalIO_SetLED(uint8_t ledNumber, uint8_t state) {
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	460a      	mov	r2, r1
 80002c6:	71fb      	strb	r3, [r7, #7]
 80002c8:	4613      	mov	r3, r2
 80002ca:	71bb      	strb	r3, [r7, #6]
    // Validate LED number (0-7)
    if (ledNumber > 7)
 80002cc:	79fb      	ldrb	r3, [r7, #7]
 80002ce:	2b07      	cmp	r3, #7
 80002d0:	d822      	bhi.n	8000318 <DigitalIO_SetLED+0x5c>
        return;

    // Get pointer to LED register
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80002d2:	4b14      	ldr	r3, [pc, #80]	@ (8000324 <DigitalIO_SetLED+0x68>)
 80002d4:	60fb      	str	r3, [r7, #12]

    if (state)
 80002d6:	79bb      	ldrb	r3, [r7, #6]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d00d      	beq.n	80002f8 <DigitalIO_SetLED+0x3c>
        *led_register |= (1 << ledNumber);  // Set bit
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	b25a      	sxtb	r2, r3
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	2101      	movs	r1, #1
 80002e6:	fa01 f303 	lsl.w	r3, r1, r3
 80002ea:	b25b      	sxtb	r3, r3
 80002ec:	4313      	orrs	r3, r2
 80002ee:	b25b      	sxtb	r3, r3
 80002f0:	b2da      	uxtb	r2, r3
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	701a      	strb	r2, [r3, #0]
 80002f6:	e010      	b.n	800031a <DigitalIO_SetLED+0x5e>
    else
        *led_register &= ~(1 << ledNumber); // Clear bit
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	b25a      	sxtb	r2, r3
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	2101      	movs	r1, #1
 8000302:	fa01 f303 	lsl.w	r3, r1, r3
 8000306:	b25b      	sxtb	r3, r3
 8000308:	43db      	mvns	r3, r3
 800030a:	b25b      	sxtb	r3, r3
 800030c:	4013      	ands	r3, r2
 800030e:	b25b      	sxtb	r3, r3
 8000310:	b2da      	uxtb	r2, r3
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	701a      	strb	r2, [r3, #0]
 8000316:	e000      	b.n	800031a <DigitalIO_SetLED+0x5e>
        return;
 8000318:	bf00      	nop
}
 800031a:	3714      	adds	r7, #20
 800031c:	46bd      	mov	sp, r7
 800031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000322:	4770      	bx	lr
 8000324:	48001015 	.word	0x48001015

08000328 <DigitalIO_SetButtonCallback>:
}

/**
 * @brief Set the button press callback function
 */
void DigitalIO_SetButtonCallback(ButtonCallback callback) {
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
    g_buttonCallback = callback;
 8000330:	4a04      	ldr	r2, [pc, #16]	@ (8000344 <DigitalIO_SetButtonCallback+0x1c>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	6013      	str	r3, [r2, #0]
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	2000001c 	.word	0x2000001c

08000348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000356:	2b00      	cmp	r3, #0
 8000358:	db0b      	blt.n	8000372 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800035a:	79fb      	ldrb	r3, [r7, #7]
 800035c:	f003 021f 	and.w	r2, r3, #31
 8000360:	4907      	ldr	r1, [pc, #28]	@ (8000380 <__NVIC_EnableIRQ+0x38>)
 8000362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000366:	095b      	lsrs	r3, r3, #5
 8000368:	2001      	movs	r0, #1
 800036a:	fa00 f202 	lsl.w	r2, r0, r2
 800036e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000372:	bf00      	nop
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	e000e100 	.word	0xe000e100

08000384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	6039      	str	r1, [r7, #0]
 800038e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000394:	2b00      	cmp	r3, #0
 8000396:	db0a      	blt.n	80003ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	b2da      	uxtb	r2, r3
 800039c:	490c      	ldr	r1, [pc, #48]	@ (80003d0 <__NVIC_SetPriority+0x4c>)
 800039e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a2:	0112      	lsls	r2, r2, #4
 80003a4:	b2d2      	uxtb	r2, r2
 80003a6:	440b      	add	r3, r1
 80003a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003ac:	e00a      	b.n	80003c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	b2da      	uxtb	r2, r3
 80003b2:	4908      	ldr	r1, [pc, #32]	@ (80003d4 <__NVIC_SetPriority+0x50>)
 80003b4:	79fb      	ldrb	r3, [r7, #7]
 80003b6:	f003 030f 	and.w	r3, r3, #15
 80003ba:	3b04      	subs	r3, #4
 80003bc:	0112      	lsls	r2, r2, #4
 80003be:	b2d2      	uxtb	r2, r2
 80003c0:	440b      	add	r3, r1
 80003c2:	761a      	strb	r2, [r3, #24]
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	e000e100 	.word	0xe000e100
 80003d4:	e000ed00 	.word	0xe000ed00

080003d8 <delay_button_callback>:

// Global flag to indicate button press
static volatile uint8_t button_was_pressed = 0;

// Button callback function - sets flag and returns immediately
void delay_button_callback(void) {
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
    // Just set a flag and return immediately
    button_was_pressed = 1;
 80003de:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <delay_button_callback+0x44>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	701a      	strb	r2, [r3, #0]

    // Visual indication that button press was detected
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80003e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000420 <delay_button_callback+0x48>)
 80003e6:	60fb      	str	r3, [r7, #12]
    uint8_t saved_state = *led_register;
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	72fb      	strb	r3, [r7, #11]
    *led_register = 0xFF; // All on
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	22ff      	movs	r2, #255	@ 0xff
 80003f2:	701a      	strb	r2, [r3, #0]
    for(volatile uint32_t i = 0; i < 100000; i++); // Brief delay
 80003f4:	2300      	movs	r3, #0
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	e002      	b.n	8000400 <delay_button_callback+0x28>
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	3301      	adds	r3, #1
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a08      	ldr	r2, [pc, #32]	@ (8000424 <delay_button_callback+0x4c>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d9f8      	bls.n	80003fa <delay_button_callback+0x22>
    *led_register = saved_state; // Restore original state
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	7afa      	ldrb	r2, [r7, #11]
 800040c:	701a      	strb	r2, [r3, #0]
}
 800040e:	bf00      	nop
 8000410:	3714      	adds	r7, #20
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	20000021 	.word	0x20000021
 8000420:	48001015 	.word	0x48001015
 8000424:	0001869f 	.word	0x0001869f

08000428 <TIM2_IRQHandler>:

// Timer interrupt handler
void TIM2_IRQHandler(void) {
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
    // Clear interrupt flag
    TIM2->SR &= ~TIM_SR_UIF;
 800042e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000432:	691b      	ldr	r3, [r3, #16]
 8000434:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000438:	f023 0301 	bic.w	r3, r3, #1
 800043c:	6113      	str	r3, [r2, #16]

    // Debug - Toggle LED 7 to indicate timer tick
    static uint8_t toggle_state = 0;
    toggle_state = !toggle_state;
 800043e:	4b24      	ldr	r3, [pc, #144]	@ (80004d0 <TIM2_IRQHandler+0xa8>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b00      	cmp	r3, #0
 8000444:	bf0c      	ite	eq
 8000446:	2301      	moveq	r3, #1
 8000448:	2300      	movne	r3, #0
 800044a:	b2db      	uxtb	r3, r3
 800044c:	461a      	mov	r2, r3
 800044e:	4b20      	ldr	r3, [pc, #128]	@ (80004d0 <TIM2_IRQHandler+0xa8>)
 8000450:	701a      	strb	r2, [r3, #0]

    // Check for button press or automatic timing
    static int auto_counter = 0;
    uint8_t move_led = 0;  // Using uint8_t instead of bool
 8000452:	2300      	movs	r3, #0
 8000454:	71fb      	strb	r3, [r7, #7]

    // If button was pressed, move LED immediately and reset auto counter
    if (button_was_pressed) {
 8000456:	4b1f      	ldr	r3, [pc, #124]	@ (80004d4 <TIM2_IRQHandler+0xac>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	b2db      	uxtb	r3, r3
 800045c:	2b00      	cmp	r3, #0
 800045e:	d008      	beq.n	8000472 <TIM2_IRQHandler+0x4a>
        button_was_pressed = 0;
 8000460:	4b1c      	ldr	r3, [pc, #112]	@ (80004d4 <TIM2_IRQHandler+0xac>)
 8000462:	2200      	movs	r2, #0
 8000464:	701a      	strb	r2, [r3, #0]
        move_led = 1;  // Using 1 instead of true
 8000466:	2301      	movs	r3, #1
 8000468:	71fb      	strb	r3, [r7, #7]
        auto_counter = 0;  // Reset automatic counter
 800046a:	4b1b      	ldr	r3, [pc, #108]	@ (80004d8 <TIM2_IRQHandler+0xb0>)
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	e00d      	b.n	800048e <TIM2_IRQHandler+0x66>
    }
    // Otherwise, check if it's time for automatic movement
    else if (++auto_counter >= 3) {
 8000472:	4b19      	ldr	r3, [pc, #100]	@ (80004d8 <TIM2_IRQHandler+0xb0>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	3301      	adds	r3, #1
 8000478:	4a17      	ldr	r2, [pc, #92]	@ (80004d8 <TIM2_IRQHandler+0xb0>)
 800047a:	6013      	str	r3, [r2, #0]
 800047c:	4b16      	ldr	r3, [pc, #88]	@ (80004d8 <TIM2_IRQHandler+0xb0>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2b02      	cmp	r3, #2
 8000482:	dd04      	ble.n	800048e <TIM2_IRQHandler+0x66>
        move_led = 1;  // Using 1 instead of true
 8000484:	2301      	movs	r3, #1
 8000486:	71fb      	strb	r3, [r7, #7]
        auto_counter = 0;
 8000488:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <TIM2_IRQHandler+0xb0>)
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
    }

    // If we need to move the LED (from either source)
    if (move_led) {
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d018      	beq.n	80004c6 <TIM2_IRQHandler+0x9e>
        // Turn off current LED
        DigitalIO_SetLED(current_led, 0);
 8000494:	4b11      	ldr	r3, [pc, #68]	@ (80004dc <TIM2_IRQHandler+0xb4>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff ff0e 	bl	80002bc <DigitalIO_SetLED>

        // Move to next LED
        current_led = (current_led + 1) % 8;
 80004a0:	4b0e      	ldr	r3, [pc, #56]	@ (80004dc <TIM2_IRQHandler+0xb4>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	3301      	adds	r3, #1
 80004a6:	425a      	negs	r2, r3
 80004a8:	f003 0307 	and.w	r3, r3, #7
 80004ac:	f002 0207 	and.w	r2, r2, #7
 80004b0:	bf58      	it	pl
 80004b2:	4253      	negpl	r3, r2
 80004b4:	b2da      	uxtb	r2, r3
 80004b6:	4b09      	ldr	r3, [pc, #36]	@ (80004dc <TIM2_IRQHandler+0xb4>)
 80004b8:	701a      	strb	r2, [r3, #0]

        // Turn on new LED
        DigitalIO_SetLED(current_led, 1);
 80004ba:	4b08      	ldr	r3, [pc, #32]	@ (80004dc <TIM2_IRQHandler+0xb4>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2101      	movs	r1, #1
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff fefb 	bl	80002bc <DigitalIO_SetLED>
    }
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000022 	.word	0x20000022
 80004d4:	20000021 	.word	0x20000021
 80004d8:	20000024 	.word	0x20000024
 80004dc:	20000020 	.word	0x20000020

080004e0 <DigitalIO_InitDelay>:

// Initialize the timer delay mechanism
void DigitalIO_InitDelay(uint16_t delay_ms) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	80fb      	strh	r3, [r7, #6]


    // Enable clock for TIM2
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80004ea:	4b17      	ldr	r3, [pc, #92]	@ (8000548 <DigitalIO_InitDelay+0x68>)
 80004ec:	69db      	ldr	r3, [r3, #28]
 80004ee:	4a16      	ldr	r2, [pc, #88]	@ (8000548 <DigitalIO_InitDelay+0x68>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	61d3      	str	r3, [r2, #28]

    // Configure TIM2 for the specified delay
    TIM2->PSC = 7999;                  // 8MHz / 8000 = 1kHz (1ms tick)
 80004f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004fa:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80004fe:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = delay_ms - 1;          // Set period to desired delay
 8000500:	88fb      	ldrh	r3, [r7, #6]
 8000502:	1e5a      	subs	r2, r3, #1
 8000504:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000508:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CNT = 0;                     // Reset counter
 800050a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800050e:	2200      	movs	r2, #0
 8000510:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->DIER = TIM_DIER_UIE;         // Enable update interrupt
 8000512:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000516:	2201      	movs	r2, #1
 8000518:	60da      	str	r2, [r3, #12]
    TIM2->CR1 = TIM_CR1_CEN;           // Enable counter
 800051a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800051e:	2201      	movs	r2, #1
 8000520:	601a      	str	r2, [r3, #0]

    // Configure NVIC for TIM2
    NVIC_SetPriority(TIM2_IRQn, 1);
 8000522:	2101      	movs	r1, #1
 8000524:	201c      	movs	r0, #28
 8000526:	f7ff ff2d 	bl	8000384 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 800052a:	201c      	movs	r0, #28
 800052c:	f7ff ff0c 	bl	8000348 <__NVIC_EnableIRQ>

    // Initialize with LED 0 on
    DigitalIO_SetLED(0, 1);
 8000530:	2101      	movs	r1, #1
 8000532:	2000      	movs	r0, #0
 8000534:	f7ff fec2 	bl	80002bc <DigitalIO_SetLED>
    current_led = 0;
 8000538:	4b04      	ldr	r3, [pc, #16]	@ (800054c <DigitalIO_InitDelay+0x6c>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40021000 	.word	0x40021000
 800054c:	20000020 	.word	0x20000020

08000550 <__NVIC_EnableIRQ>:
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800055a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055e:	2b00      	cmp	r3, #0
 8000560:	db0b      	blt.n	800057a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	f003 021f 	and.w	r2, r3, #31
 8000568:	4907      	ldr	r1, [pc, #28]	@ (8000588 <__NVIC_EnableIRQ+0x38>)
 800056a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800056e:	095b      	lsrs	r3, r3, #5
 8000570:	2001      	movs	r0, #1
 8000572:	fa00 f202 	lsl.w	r2, r0, r2
 8000576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	e000e100 	.word	0xe000e100

0800058c <__NVIC_SetPriority>:
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	6039      	str	r1, [r7, #0]
 8000596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059c:	2b00      	cmp	r3, #0
 800059e:	db0a      	blt.n	80005b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	490c      	ldr	r1, [pc, #48]	@ (80005d8 <__NVIC_SetPriority+0x4c>)
 80005a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005aa:	0112      	lsls	r2, r2, #4
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	440b      	add	r3, r1
 80005b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80005b4:	e00a      	b.n	80005cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4908      	ldr	r1, [pc, #32]	@ (80005dc <__NVIC_SetPriority+0x50>)
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	f003 030f 	and.w	r3, r3, #15
 80005c2:	3b04      	subs	r3, #4
 80005c4:	0112      	lsls	r2, r2, #4
 80005c6:	b2d2      	uxtb	r2, r2
 80005c8:	440b      	add	r3, r1
 80005ca:	761a      	strb	r2, [r3, #24]
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	e000e100 	.word	0xe000e100
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <main>:
 *********************************************/
#ifdef DEMO_PART_D
#include "digital_io_d.h"
#include "stm32f303xc.h"

int main(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
    // Init GPIOs
    DigitalIO_Init();
 80005e4:	f7ff fe3a 	bl	800025c <DigitalIO_Init>

    // Register the button callback
    DigitalIO_SetButtonCallback(delay_button_callback);  // <<< ADD THIS
 80005e8:	4812      	ldr	r0, [pc, #72]	@ (8000634 <main+0x54>)
 80005ea:	f7ff fe9d 	bl	8000328 <DigitalIO_SetButtonCallback>

    // Init timer with 3-second tick (3 ticks = 9s)
    DigitalIO_InitDelay(3000);
 80005ee:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80005f2:	f7ff ff75 	bl	80004e0 <DigitalIO_InitDelay>

    // EXTI setup (already working in your IRQHandler.c)
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80005f6:	4b10      	ldr	r3, [pc, #64]	@ (8000638 <main+0x58>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000638 <main+0x58>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6193      	str	r3, [r2, #24]
    SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 8000602:	4b0e      	ldr	r3, [pc, #56]	@ (800063c <main+0x5c>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
    EXTI->RTSR |= EXTI_RTSR_TR0;
 8000608:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <main+0x60>)
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	4a0c      	ldr	r2, [pc, #48]	@ (8000640 <main+0x60>)
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	6093      	str	r3, [r2, #8]
    EXTI->IMR |= EXTI_IMR_MR0;
 8000614:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <main+0x60>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a09      	ldr	r2, [pc, #36]	@ (8000640 <main+0x60>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6013      	str	r3, [r2, #0]
    NVIC_SetPriority(EXTI0_IRQn, 1);
 8000620:	2101      	movs	r1, #1
 8000622:	2006      	movs	r0, #6
 8000624:	f7ff ffb2 	bl	800058c <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);
 8000628:	2006      	movs	r0, #6
 800062a:	f7ff ff91 	bl	8000550 <__NVIC_EnableIRQ>

    for(;;) {
 800062e:	bf00      	nop
 8000630:	e7fd      	b.n	800062e <main+0x4e>
 8000632:	bf00      	nop
 8000634:	080003d9 	.word	0x080003d9
 8000638:	40021000 	.word	0x40021000
 800063c:	40010000 	.word	0x40010000
 8000640:	40010400 	.word	0x40010400

08000644 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000644:	480d      	ldr	r0, [pc, #52]	@ (800067c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000646:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000648:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800064c:	480c      	ldr	r0, [pc, #48]	@ (8000680 <LoopForever+0x6>)
  ldr r1, =_edata
 800064e:	490d      	ldr	r1, [pc, #52]	@ (8000684 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000650:	4a0d      	ldr	r2, [pc, #52]	@ (8000688 <LoopForever+0xe>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000654:	e002      	b.n	800065c <LoopCopyDataInit>

08000656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065a:	3304      	adds	r3, #4

0800065c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800065c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000660:	d3f9      	bcc.n	8000656 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000662:	4a0a      	ldr	r2, [pc, #40]	@ (800068c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000664:	4c0a      	ldr	r4, [pc, #40]	@ (8000690 <LoopForever+0x16>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000668:	e001      	b.n	800066e <LoopFillZerobss>

0800066a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800066c:	3204      	adds	r2, #4

0800066e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000670:	d3fb      	bcc.n	800066a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000672:	f000 f811 	bl	8000698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000676:	f7ff ffb3 	bl	80005e0 <main>

0800067a <LoopForever>:

LoopForever:
  b LoopForever
 800067a:	e7fe      	b.n	800067a <LoopForever>
  ldr   r0, =_estack
 800067c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000684:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000688:	08000700 	.word	0x08000700
  ldr r2, =_sbss
 800068c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000690:	20000028 	.word	0x20000028

08000694 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000694:	e7fe      	b.n	8000694 <ADC1_2_IRQHandler>
	...

08000698 <__libc_init_array>:
 8000698:	b570      	push	{r4, r5, r6, lr}
 800069a:	4d0d      	ldr	r5, [pc, #52]	@ (80006d0 <__libc_init_array+0x38>)
 800069c:	4c0d      	ldr	r4, [pc, #52]	@ (80006d4 <__libc_init_array+0x3c>)
 800069e:	1b64      	subs	r4, r4, r5
 80006a0:	10a4      	asrs	r4, r4, #2
 80006a2:	2600      	movs	r6, #0
 80006a4:	42a6      	cmp	r6, r4
 80006a6:	d109      	bne.n	80006bc <__libc_init_array+0x24>
 80006a8:	4d0b      	ldr	r5, [pc, #44]	@ (80006d8 <__libc_init_array+0x40>)
 80006aa:	4c0c      	ldr	r4, [pc, #48]	@ (80006dc <__libc_init_array+0x44>)
 80006ac:	f000 f818 	bl	80006e0 <_init>
 80006b0:	1b64      	subs	r4, r4, r5
 80006b2:	10a4      	asrs	r4, r4, #2
 80006b4:	2600      	movs	r6, #0
 80006b6:	42a6      	cmp	r6, r4
 80006b8:	d105      	bne.n	80006c6 <__libc_init_array+0x2e>
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80006c0:	4798      	blx	r3
 80006c2:	3601      	adds	r6, #1
 80006c4:	e7ee      	b.n	80006a4 <__libc_init_array+0xc>
 80006c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ca:	4798      	blx	r3
 80006cc:	3601      	adds	r6, #1
 80006ce:	e7f2      	b.n	80006b6 <__libc_init_array+0x1e>
 80006d0:	080006f8 	.word	0x080006f8
 80006d4:	080006f8 	.word	0x080006f8
 80006d8:	080006f8 	.word	0x080006f8
 80006dc:	080006fc 	.word	0x080006fc

080006e0 <_init>:
 80006e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006e2:	bf00      	nop
 80006e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006e6:	bc08      	pop	{r3}
 80006e8:	469e      	mov	lr, r3
 80006ea:	4770      	bx	lr

080006ec <_fini>:
 80006ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ee:	bf00      	nop
 80006f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006f2:	bc08      	pop	{r3}
 80006f4:	469e      	mov	lr, r3
 80006f6:	4770      	bx	lr
