#include <stdint.h>
#include "stm32f303xc.h"
#include "digital_io.h"  // Include our new module

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

// store a pointer to the function that is called when a button is pressed
// set a default value of NULL so that it won't be called until the
// function pointer is defined
void (*on_button_press)() = 0x00;

void EXTI0_IRQHandler(void)
{
    // run the button press handler (make sure it is not null first !)
    if (on_button_press != 0x00) {
        on_button_press();
    }

    // reset the interrupt (so it doesn't keep firing until the next trigger)
    EXTI->PR |= EXTI_PR_PR0;
}

void enable_interrupt() {
    // Disable the interrupts while messing around with the settings
    //  otherwise can lead to strange behaviour
    __disable_irq();

    // Enable the system configuration controller (SYSCFG in RCC)
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;

    // External Interrupts details on large manual page 294)
    // PA0 is on interrupt EXTI0 large manual - page 250
    // EXTI0 in  SYSCFG_EXTICR1 needs to be 0x00 (SYSCFG_EXTICR1_EXTI0_PA)
    SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;

    //  Select EXTI0 interrupt on rising edge
    EXTI->RTSR |= EXTI_RTSR_TR0; // rising edge of EXTI line 0 (includes PA0)

    // set the interrupt from EXTI line 0 as 'not masked' - as in, enable it.
    EXTI->IMR |= EXTI_IMR_MR0;

    // Tell the NVIC module that EXTI0 interrupts should be handled
    NVIC_SetPriority(EXTI0_IRQn, 1);  // Set Priority
    NVIC_EnableIRQ(EXTI0_IRQn);

    // Re-enable all interrupts (now that we are finished)
    __enable_irq();
}

// Modified chase_led function to use our module
void chase_led(){
    uint8_t current_pattern = DigitalIO_GetLEDPattern();

    // Shift left by 1
    current_pattern <<= 1;

    // If all LEDs are off, turn on the first one
    if (current_pattern == 0) {
        current_pattern = 1;
    }

    // Update all LEDs at once
    DigitalIO_SetLEDPattern(current_pattern);
}

int main(void)
{
    // Initialize our module instead of calling enable_clocks and initialise_board
    DigitalIO_Init();

    // set the interrupt handling function
    on_button_press = &chase_led;

    // enable the interrupt for the button
    enable_interrupt();

    /* Test initial LED pattern */
    DigitalIO_SetLED(0, 1);  // Turn on first LED

    /* Loop forever */
    for(;;) {}
}
