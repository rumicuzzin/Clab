
timers_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005fc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000790  08000798  00001798  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000790  08000790  00001798  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000790  08000790  00001798  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000790  08000798  00001798  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000790  08000790  00001790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000794  08000794  00001794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001798  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001798  2**0
                  CONTENTS
 10 .bss          00000030  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001798  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000151f  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000523  00000000  00000000  00002ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000f8  00000000  00000000  00003210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000a8  00000000  00000000  00003308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015093  00000000  00000000  000033b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001345  00000000  00000000  00018443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00072b98  00000000  00000000  00019788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008c320  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002d4  00000000  00000000  0008c364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0008c638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000778 	.word	0x08000778

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000778 	.word	0x08000778

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	2b00      	cmp	r3, #0
 8000220:	db12      	blt.n	8000248 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f003 021f 	and.w	r2, r3, #31
 8000228:	490a      	ldr	r1, [pc, #40]	@ (8000254 <__NVIC_DisableIRQ+0x44>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	095b      	lsrs	r3, r3, #5
 8000230:	2001      	movs	r0, #1
 8000232:	fa00 f202 	lsl.w	r2, r0, r2
 8000236:	3320      	adds	r3, #32
 8000238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800023c:	f3bf 8f4f 	dsb	sy
}
 8000240:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000242:	f3bf 8f6f 	isb	sy
}
 8000246:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	e000e100 	.word	0xe000e100

08000258 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000266:	2b00      	cmp	r3, #0
 8000268:	db0c      	blt.n	8000284 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	f003 021f 	and.w	r2, r3, #31
 8000270:	4907      	ldr	r1, [pc, #28]	@ (8000290 <__NVIC_ClearPendingIRQ+0x38>)
 8000272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000276:	095b      	lsrs	r3, r3, #5
 8000278:	2001      	movs	r0, #1
 800027a:	fa00 f202 	lsl.w	r2, r0, r2
 800027e:	3360      	adds	r3, #96	@ 0x60
 8000280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	e000e100 	.word	0xe000e100

08000294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	6039      	str	r1, [r7, #0]
 800029e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	db0a      	blt.n	80002be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	b2da      	uxtb	r2, r3
 80002ac:	490c      	ldr	r1, [pc, #48]	@ (80002e0 <__NVIC_SetPriority+0x4c>)
 80002ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b2:	0112      	lsls	r2, r2, #4
 80002b4:	b2d2      	uxtb	r2, r2
 80002b6:	440b      	add	r3, r1
 80002b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002bc:	e00a      	b.n	80002d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	b2da      	uxtb	r2, r3
 80002c2:	4908      	ldr	r1, [pc, #32]	@ (80002e4 <__NVIC_SetPriority+0x50>)
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	f003 030f 	and.w	r3, r3, #15
 80002ca:	3b04      	subs	r3, #4
 80002cc:	0112      	lsls	r2, r2, #4
 80002ce:	b2d2      	uxtb	r2, r2
 80002d0:	440b      	add	r3, r1
 80002d2:	761a      	strb	r2, [r3, #24]
}
 80002d4:	bf00      	nop
 80002d6:	370c      	adds	r7, #12
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	e000e100 	.word	0xe000e100
 80002e4:	e000ed00 	.word	0xe000ed00

080002e8 <enable_clocks>:
callback_t timer_callback = NULL;
uint8_t current_led = 0;
int32_t time_period_ms = 0;

// Enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks() {
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
    // Enable the clock for the GPIO port of the LED
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 80002ec:	4b08      	ldr	r3, [pc, #32]	@ (8000310 <enable_clocks+0x28>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	4a07      	ldr	r2, [pc, #28]	@ (8000310 <enable_clocks+0x28>)
 80002f2:	f443 1328 	orr.w	r3, r3, #2752512	@ 0x2a0000
 80002f6:	6153      	str	r3, [r2, #20]
    // Enable the peripheral clock for timer 2
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM2EN;;
 80002f8:	4b05      	ldr	r3, [pc, #20]	@ (8000310 <enable_clocks+0x28>)
 80002fa:	69db      	ldr	r3, [r3, #28]
 80002fc:	4a04      	ldr	r2, [pc, #16]	@ (8000310 <enable_clocks+0x28>)
 80002fe:	f043 0301 	orr.w	r3, r3, #1
 8000302:	61d3      	str	r3, [r2, #28]
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40021000 	.word	0x40021000

08000314 <initialise_board>:

// Initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board() {
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
    // Get a pointer to the second half word of the MODER register (for outputs pe8-15)
    uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 800031a:	4b06      	ldr	r3, [pc, #24]	@ (8000334 <initialise_board+0x20>)
 800031c:	607b      	str	r3, [r7, #4]
    *led_output_registers = 0x5555;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000324:	801a      	strh	r2, [r3, #0]
    // Set all 8 LED's to output mode
}
 8000326:	bf00      	nop
 8000328:	370c      	adds	r7, #12
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	48001002 	.word	0x48001002

08000338 <timer_init>:

// Initialize timer 2 with specified time period and callback function
void timer_init(uint32_t time_period_ms, callback_t cb) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000342:	b672      	cpsid	i
}
 8000344:	bf00      	nop
	//  otherwise can lead to strange behaviour
	__disable_irq();


    // Store the callback function
    timer_callback = cb; // This stores the callback function to be used in the interrupt handler
 8000346:	4a1c      	ldr	r2, [pc, #112]	@ (80003b8 <timer_init+0x80>)
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	6013      	str	r3, [r2, #0]

    // Disable interrupts for the timer
    NVIC_DisableIRQ(TIM2_IRQn);
 800034c:	201c      	movs	r0, #28
 800034e:	f7ff ff5f 	bl	8000210 <__NVIC_DisableIRQ>
    // Clear any pending interrupt
    NVIC_ClearPendingIRQ(TIM2_IRQn);
 8000352:	201c      	movs	r0, #28
 8000354:	f7ff ff80 	bl	8000258 <__NVIC_ClearPendingIRQ>
    // Set the timer prescaler
    // Goal is to trigger an interrupt based on the provided time_period_ms
    // time_period_ms = (PSC + 1) * (ARR + 1) / 8_000_000 * 1000

    // For a 1ms timer tick: 8MHz / 8000 = 1kHz timer clock
    TIM2->PSC = 7999;
 8000358:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800035c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000360:	629a      	str	r2, [r3, #40]	@ 0x28

    // Calculate the auto-reload value based on the desired time period
    // For example, if time_period_ms = 2000 (2 seconds), ARR = 1999
    TIM2->ARR = (time_period_ms - 1);
 8000362:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	3b01      	subs	r3, #1
 800036a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    // Disable Update Request Source (URS) bit
    // This prevents update events from counter initialization
    //TIM2->CR1 &= ~TIM_CR1_URS;

    // Generate an update event to load the new settings
    TIM2->EGR |= TIM_EGR_UG;
 800036c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	6153      	str	r3, [r2, #20]
    // Clear the update flag that was set by the UG bit
    TIM2->SR &= ~TIM_SR_UIF;
 800037c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000380:	691b      	ldr	r3, [r3, #16]
 8000382:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000386:	f023 0301 	bic.w	r3, r3, #1
 800038a:	6113      	str	r3, [r2, #16]
    // Enable update interrupt for Timer 2
    TIM2->DIER |= TIM_DIER_UIE;
 800038c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000390:	68db      	ldr	r3, [r3, #12]
 8000392:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000396:	f043 0301 	orr.w	r3, r3, #1
 800039a:	60d3      	str	r3, [r2, #12]

    // Configure and enable Timer 2 interrupt in NVIC
    NVIC_SetPriority(TIM2_IRQn, 1); // Set priority (0 is highest, 3 is lowest)
 800039c:	2101      	movs	r1, #1
 800039e:	201c      	movs	r0, #28
 80003a0:	f7ff ff78 	bl	8000294 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);      // Enable the Timer 2 interrupt in NVIC
 80003a4:	201c      	movs	r0, #28
 80003a6:	f7ff ff15 	bl	80001d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80003aa:	b662      	cpsie	i
}
 80003ac:	bf00      	nop

    // Re-enable all interrupts (now that we are finished)
    __enable_irq();
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	2000001c 	.word	0x2000001c

080003bc <set_led>:

// Set LED function to be called by the callback
void set_led(void) {
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
    // When we've reached LED 8, it means all LEDs are lit, so reset and turn all off
    if (current_led >= 8) {
 80003c2:	4b10      	ldr	r3, [pc, #64]	@ (8000404 <set_led+0x48>)
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	2b07      	cmp	r3, #7
 80003c8:	d907      	bls.n	80003da <set_led+0x1e>
        // Turn all LEDs off by setting bits 24-31 (which reset pins 8-15)
    	GPIOE->BSRR = 0xFF000000;
 80003ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000408 <set_led+0x4c>)
 80003cc:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80003d0:	619a      	str	r2, [r3, #24]
        // Reset the counter to start over
        current_led = 0;
 80003d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000404 <set_led+0x48>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	701a      	strb	r2, [r3, #0]
        return;
 80003d8:	e00f      	b.n	80003fa <set_led+0x3e>
    }

    // Calculate which LED to turn on (PE8 through PE15)
    uint16_t led_pin = 1 << (8 + current_led);
 80003da:	4b0a      	ldr	r3, [pc, #40]	@ (8000404 <set_led+0x48>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	3308      	adds	r3, #8
 80003e0:	2201      	movs	r2, #1
 80003e2:	fa02 f303 	lsl.w	r3, r2, r3
 80003e6:	80fb      	strh	r3, [r7, #6]

    // Turn on the current LED (without turning off others)
    GPIOE->BSRR = led_pin;
 80003e8:	4a07      	ldr	r2, [pc, #28]	@ (8000408 <set_led+0x4c>)
 80003ea:	88fb      	ldrh	r3, [r7, #6]
 80003ec:	6193      	str	r3, [r2, #24]

    // Move to the next LED
    current_led++;
 80003ee:	4b05      	ldr	r3, [pc, #20]	@ (8000404 <set_led+0x48>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	3301      	adds	r3, #1
 80003f4:	b2da      	uxtb	r2, r3
 80003f6:	4b03      	ldr	r3, [pc, #12]	@ (8000404 <set_led+0x48>)
 80003f8:	701a      	strb	r2, [r3, #0]
}
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr
 8000404:	20000020 	.word	0x20000020
 8000408:	48001000 	.word	0x48001000

0800040c <enable_timer>:

// Enable the timer to start counting
void enable_timer(void) {
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
    // Enable the Timer 2 counter
    TIM2->CR1 |= TIM_CR1_CEN;
 8000410:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800041a:	f043 0301 	orr.w	r3, r3, #1
 800041e:	6013      	str	r3, [r2, #0]
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
	...

0800042c <TIM2_IRQHandler>:

// Timer 2 Interrupt Service Routine
void TIM2_IRQHandler(void) {
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 8000430:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000434:	691b      	ldr	r3, [r3, #16]
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	2b00      	cmp	r3, #0
 800043c:	d00e      	beq.n	800045c <TIM2_IRQHandler+0x30>
        // Clear the update interrupt flag
        TIM2->SR &= ~TIM_SR_UIF;
 800043e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000442:	691b      	ldr	r3, [r3, #16]
 8000444:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000448:	f023 0301 	bic.w	r3, r3, #1
 800044c:	6113      	str	r3, [r2, #16]

        // Call the callback function if it's not NULL
        if (timer_callback != NULL) {
 800044e:	4b04      	ldr	r3, [pc, #16]	@ (8000460 <TIM2_IRQHandler+0x34>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2b00      	cmp	r3, #0
 8000454:	d002      	beq.n	800045c <TIM2_IRQHandler+0x30>
            timer_callback();
 8000456:	4b02      	ldr	r3, [pc, #8]	@ (8000460 <TIM2_IRQHandler+0x34>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4798      	blx	r3
        }
    }
}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}
 8000460:	2000001c 	.word	0x2000001c

08000464 <__NVIC_EnableIRQ>:
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800046e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000472:	2b00      	cmp	r3, #0
 8000474:	db0b      	blt.n	800048e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	f003 021f 	and.w	r2, r3, #31
 800047c:	4907      	ldr	r1, [pc, #28]	@ (800049c <__NVIC_EnableIRQ+0x38>)
 800047e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000482:	095b      	lsrs	r3, r3, #5
 8000484:	2001      	movs	r0, #1
 8000486:	fa00 f202 	lsl.w	r2, r0, r2
 800048a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	e000e100 	.word	0xe000e100

080004a0 <__NVIC_DisableIRQ>:
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	db12      	blt.n	80004d8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	f003 021f 	and.w	r2, r3, #31
 80004b8:	490a      	ldr	r1, [pc, #40]	@ (80004e4 <__NVIC_DisableIRQ+0x44>)
 80004ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004be:	095b      	lsrs	r3, r3, #5
 80004c0:	2001      	movs	r0, #1
 80004c2:	fa00 f202 	lsl.w	r2, r0, r2
 80004c6:	3320      	adds	r3, #32
 80004c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80004cc:	f3bf 8f4f 	dsb	sy
}
 80004d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004d2:	f3bf 8f6f 	isb	sy
}
 80004d6:	bf00      	nop
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	e000e100 	.word	0xe000e100

080004e8 <__NVIC_ClearPendingIRQ>:
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	db0c      	blt.n	8000514 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	f003 021f 	and.w	r2, r3, #31
 8000500:	4907      	ldr	r1, [pc, #28]	@ (8000520 <__NVIC_ClearPendingIRQ+0x38>)
 8000502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000506:	095b      	lsrs	r3, r3, #5
 8000508:	2001      	movs	r0, #1
 800050a:	fa00 f202 	lsl.w	r2, r0, r2
 800050e:	3360      	adds	r3, #96	@ 0x60
 8000510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000514:	bf00      	nop
 8000516:	370c      	adds	r7, #12
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	e000e100 	.word	0xe000e100

08000524 <__NVIC_SetPriority>:
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	6039      	str	r1, [r7, #0]
 800052e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000534:	2b00      	cmp	r3, #0
 8000536:	db0a      	blt.n	800054e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	b2da      	uxtb	r2, r3
 800053c:	490c      	ldr	r1, [pc, #48]	@ (8000570 <__NVIC_SetPriority+0x4c>)
 800053e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000542:	0112      	lsls	r2, r2, #4
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	440b      	add	r3, r1
 8000548:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800054c:	e00a      	b.n	8000564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4908      	ldr	r1, [pc, #32]	@ (8000574 <__NVIC_SetPriority+0x50>)
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	f003 030f 	and.w	r3, r3, #15
 800055a:	3b04      	subs	r3, #4
 800055c:	0112      	lsls	r2, r2, #4
 800055e:	b2d2      	uxtb	r2, r2
 8000560:	440b      	add	r3, r1
 8000562:	761a      	strb	r2, [r3, #24]
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	e000e100 	.word	0xe000e100
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <one_shot_trigger>:
int32_t delay = 0;
// Global variable for the one-shot callback
callback_t oneshot_callback = NULL;


void one_shot_trigger(uint32_t  delay_ms, callback_t cb_c) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]
    // Store the callback function for later use
    oneshot_callback = cb_c;
 8000582:	4a30      	ldr	r2, [pc, #192]	@ (8000644 <one_shot_trigger+0xcc>)
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000588:	b672      	cpsid	i
}
 800058a:	bf00      	nop
    // Disable interrupts while configuring the timer
    __disable_irq();

    // Configure timer for one-shot mode
    // First, stop the timer if it's running
    TIM2->CR1 &= ~TIM_CR1_CEN;
 800058c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000596:	f023 0301 	bic.w	r3, r3, #1
 800059a:	6013      	str	r3, [r2, #0]

    // Disable the timer interrupt NVIC before clearing flags & clear flags
    NVIC_DisableIRQ(TIM2_IRQn);
 800059c:	201c      	movs	r0, #28
 800059e:	f7ff ff7f 	bl	80004a0 <__NVIC_DisableIRQ>
    NVIC_ClearPendingIRQ(TIM2_IRQn);
 80005a2:	201c      	movs	r0, #28
 80005a4:	f7ff ffa0 	bl	80004e8 <__NVIC_ClearPendingIRQ>


    // Set prescaler to create a 1ms time base (assuming 8MHz clock)
    TIM2->PSC = 7999;  // For 1ms ticks (8MHz / 8000 = 1kHz)
 80005a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005ac:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80005b0:	629a      	str	r2, [r3, #40]	@ 0x28
    // Set the auto-reload value based on the desired delay
    TIM2->ARR = delay_ms;
 80005b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Generate an update event to load the new settings
    TIM2->EGR |= TIM_EGR_UG;
 80005ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6153      	str	r3, [r2, #20]
    // Clear the update flag that was set by the UG bit
    TIM2->SR &= ~TIM_SR_UIF;
 80005ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005ce:	691b      	ldr	r3, [r3, #16]
 80005d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005d4:	f023 0301 	bic.w	r3, r3, #1
 80005d8:	6113      	str	r3, [r2, #16]
    // Enable update interrupt for Timer 2
    TIM2->DIER |= TIM_DIER_UIE;
 80005da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	60d3      	str	r3, [r2, #12]

    // Set one-pulse mode (OPM=1) - this makes the timer stop after one update event
    TIM2->CR1 |= TIM_CR1_OPM;
 80005ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005f4:	f043 0308 	orr.w	r3, r3, #8
 80005f8:	6013      	str	r3, [r2, #0]

    // Clear the uIF flag to not trigger an immediate event
    TIM2->SR &= ~TIM_SR_UIF;
 80005fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005fe:	691b      	ldr	r3, [r3, #16]
 8000600:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000604:	f023 0301 	bic.w	r3, r3, #1
 8000608:	6113      	str	r3, [r2, #16]
    // Enable update interrupt
    TIM2->DIER |= TIM_DIER_UIE;
 800060a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	60d3      	str	r3, [r2, #12]

    // Configure and enable Timer 3 interrupt in NVIC
    NVIC_SetPriority(TIM2_IRQn, 3);  // Lower priority than TIM2
 800061a:	2103      	movs	r1, #3
 800061c:	201c      	movs	r0, #28
 800061e:	f7ff ff81 	bl	8000524 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 8000622:	201c      	movs	r0, #28
 8000624:	f7ff ff1e 	bl	8000464 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000628:	b662      	cpsie	i
}
 800062a:	bf00      	nop

    // Re-enable interrupts
    __enable_irq();

    // Start the timer
    TIM2->CR1 |= TIM_CR1_CEN;
 800062c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000636:	f043 0301 	orr.w	r3, r3, #1
 800063a:	6013      	str	r3, [r2, #0]
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	2000002c 	.word	0x2000002c

08000648 <flash_led>:

void flash_led(void) {
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0

	// Turn all LEDs off by setting bits 24-31 (which reset pins 8-15)
	GPIOE->BSRR = 0xFF000000;
 800064e:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <flash_led+0x28>)
 8000650:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8000654:	619a      	str	r2, [r3, #24]
	// Set LED1 mask
	uint16_t led_pin = 2 << 8;
 8000656:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800065a:	80fb      	strh	r3, [r7, #6]
	// Turn on LED1
	GPIOE->BSRR = led_pin;
 800065c:	4a04      	ldr	r2, [pc, #16]	@ (8000670 <flash_led+0x28>)
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	6193      	str	r3, [r2, #24]

}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	48001000 	.word	0x48001000

08000674 <main>:
extern int32_t time_period_ms;
extern uint16_t current_led;
extern int32_t delay;

// Example main function showing how to use the timer module
int main(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0

	// A
    // Initialize system
    enable_clocks();
 8000678:	f7ff fe36 	bl	80002e8 <enable_clocks>
    initialise_board();
 800067c:	f7ff fe4a 	bl	8000314 <initialise_board>
    time_period_ms = 2000;
 8000680:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <main+0x54>)
 8000682:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000686:	601a      	str	r2, [r3, #0]
    timer_callback = &set_led;
 8000688:	4b10      	ldr	r3, [pc, #64]	@ (80006cc <main+0x58>)
 800068a:	4a11      	ldr	r2, [pc, #68]	@ (80006d0 <main+0x5c>)
 800068c:	601a      	str	r2, [r3, #0]
    // Initialize timer with 2000ms (2 second) interval and set_led callback
    timer_init(time_period_ms, timer_callback);
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <main+0x54>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	4b0d      	ldr	r3, [pc, #52]	@ (80006cc <main+0x58>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4619      	mov	r1, r3
 800069a:	4610      	mov	r0, r2
 800069c:	f7ff fe4c 	bl	8000338 <timer_init>
    // Start the timer
    enable_timer();
 80006a0:	f7ff feb4 	bl	800040c <enable_timer>

    // B
//    set_x(get_x());

    // C
    delay = 3000;
 80006a4:	4b0b      	ldr	r3, [pc, #44]	@ (80006d4 <main+0x60>)
 80006a6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80006aa:	601a      	str	r2, [r3, #0]
    timer_callback = &flash_led;
 80006ac:	4b07      	ldr	r3, [pc, #28]	@ (80006cc <main+0x58>)
 80006ae:	4a0a      	ldr	r2, [pc, #40]	@ (80006d8 <main+0x64>)
 80006b0:	601a      	str	r2, [r3, #0]
    one_shot_trigger(delay, timer_callback);
 80006b2:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <main+0x60>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b04      	ldr	r3, [pc, #16]	@ (80006cc <main+0x58>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4619      	mov	r1, r3
 80006be:	4610      	mov	r0, r2
 80006c0:	f7ff ff5a 	bl	8000578 <one_shot_trigger>

    // Main loop
    while (1) {
 80006c4:	bf00      	nop
 80006c6:	e7fd      	b.n	80006c4 <main+0x50>
 80006c8:	20000024 	.word	0x20000024
 80006cc:	2000001c 	.word	0x2000001c
 80006d0:	080003bd 	.word	0x080003bd
 80006d4:	20000028 	.word	0x20000028
 80006d8:	08000649 	.word	0x08000649

080006dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006dc:	480d      	ldr	r0, [pc, #52]	@ (8000714 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e4:	480c      	ldr	r0, [pc, #48]	@ (8000718 <LoopForever+0x6>)
  ldr r1, =_edata
 80006e6:	490d      	ldr	r1, [pc, #52]	@ (800071c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000720 <LoopForever+0xe>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ec:	e002      	b.n	80006f4 <LoopCopyDataInit>

080006ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f2:	3304      	adds	r3, #4

080006f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f8:	d3f9      	bcc.n	80006ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000724 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000728 <LoopForever+0x16>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000700:	e001      	b.n	8000706 <LoopFillZerobss>

08000702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000704:	3204      	adds	r2, #4

08000706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000708:	d3fb      	bcc.n	8000702 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800070a:	f000 f811 	bl	8000730 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800070e:	f7ff ffb1 	bl	8000674 <main>

08000712 <LoopForever>:

LoopForever:
  b LoopForever
 8000712:	e7fe      	b.n	8000712 <LoopForever>
  ldr   r0, =_estack
 8000714:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800071c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000720:	08000798 	.word	0x08000798
  ldr r2, =_sbss
 8000724:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000728:	20000030 	.word	0x20000030

0800072c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800072c:	e7fe      	b.n	800072c <ADC1_2_IRQHandler>
	...

08000730 <__libc_init_array>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	4d0d      	ldr	r5, [pc, #52]	@ (8000768 <__libc_init_array+0x38>)
 8000734:	4c0d      	ldr	r4, [pc, #52]	@ (800076c <__libc_init_array+0x3c>)
 8000736:	1b64      	subs	r4, r4, r5
 8000738:	10a4      	asrs	r4, r4, #2
 800073a:	2600      	movs	r6, #0
 800073c:	42a6      	cmp	r6, r4
 800073e:	d109      	bne.n	8000754 <__libc_init_array+0x24>
 8000740:	4d0b      	ldr	r5, [pc, #44]	@ (8000770 <__libc_init_array+0x40>)
 8000742:	4c0c      	ldr	r4, [pc, #48]	@ (8000774 <__libc_init_array+0x44>)
 8000744:	f000 f818 	bl	8000778 <_init>
 8000748:	1b64      	subs	r4, r4, r5
 800074a:	10a4      	asrs	r4, r4, #2
 800074c:	2600      	movs	r6, #0
 800074e:	42a6      	cmp	r6, r4
 8000750:	d105      	bne.n	800075e <__libc_init_array+0x2e>
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f855 3b04 	ldr.w	r3, [r5], #4
 8000758:	4798      	blx	r3
 800075a:	3601      	adds	r6, #1
 800075c:	e7ee      	b.n	800073c <__libc_init_array+0xc>
 800075e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000762:	4798      	blx	r3
 8000764:	3601      	adds	r6, #1
 8000766:	e7f2      	b.n	800074e <__libc_init_array+0x1e>
 8000768:	08000790 	.word	0x08000790
 800076c:	08000790 	.word	0x08000790
 8000770:	08000790 	.word	0x08000790
 8000774:	08000794 	.word	0x08000794

08000778 <_init>:
 8000778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800077a:	bf00      	nop
 800077c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800077e:	bc08      	pop	{r3}
 8000780:	469e      	mov	lr, r3
 8000782:	4770      	bx	lr

08000784 <_fini>:
 8000784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000786:	bf00      	nop
 8000788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800078a:	bc08      	pop	{r3}
 800078c:	469e      	mov	lr, r3
 800078e:	4770      	bx	lr
