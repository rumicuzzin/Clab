
Digital_IO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000538  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006cc  080006d4  000016d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006cc  080006cc  000016d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080006cc  080006cc  000016d4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080006cc  080006d4  000016d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006cc  080006cc  000016cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080006d0  080006d0  000016d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000016d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000016d4  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000016d4  00000000  00000000  00001704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005ed  00000000  00000000  00002dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  000033c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c1  00000000  00000000  000034e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000150e5  00000000  00000000  000035a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000019b8  00000000  00000000  0001868e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00072c5d  00000000  00000000  0001a046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008cca3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000300  00000000  00000000  0008cce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0008cfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080006b4 	.word	0x080006b4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080006b4 	.word	0x080006b4

080001d4 <DigitalIO_SetLED>:
 * @brief Set the state of a specific LED
 *
 * @param ledNumber LED number (0-7) corresponding to LD3-LD10
 * @param state 0 to turn off, non-zero to turn on
 */
void DigitalIO_SetLED(uint8_t ledNumber, uint8_t state) {
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	460a      	mov	r2, r1
 80001de:	71fb      	strb	r3, [r7, #7]
 80001e0:	4613      	mov	r3, r2
 80001e2:	71bb      	strb	r3, [r7, #6]
    // Validate LED number (0-7)
    if (ledNumber > 7)
 80001e4:	79fb      	ldrb	r3, [r7, #7]
 80001e6:	2b07      	cmp	r3, #7
 80001e8:	d822      	bhi.n	8000230 <DigitalIO_SetLED+0x5c>
        return;

    // Get pointer to LED register
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80001ea:	4b14      	ldr	r3, [pc, #80]	@ (800023c <DigitalIO_SetLED+0x68>)
 80001ec:	60fb      	str	r3, [r7, #12]

    if (state)
 80001ee:	79bb      	ldrb	r3, [r7, #6]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d00d      	beq.n	8000210 <DigitalIO_SetLED+0x3c>
        *led_register |= (1 << ledNumber);  // Set bit
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	b25a      	sxtb	r2, r3
 80001fa:	79fb      	ldrb	r3, [r7, #7]
 80001fc:	2101      	movs	r1, #1
 80001fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000202:	b25b      	sxtb	r3, r3
 8000204:	4313      	orrs	r3, r2
 8000206:	b25b      	sxtb	r3, r3
 8000208:	b2da      	uxtb	r2, r3
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	701a      	strb	r2, [r3, #0]
 800020e:	e010      	b.n	8000232 <DigitalIO_SetLED+0x5e>
    else
        *led_register &= ~(1 << ledNumber); // Clear bit
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	b25a      	sxtb	r2, r3
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	2101      	movs	r1, #1
 800021a:	fa01 f303 	lsl.w	r3, r1, r3
 800021e:	b25b      	sxtb	r3, r3
 8000220:	43db      	mvns	r3, r3
 8000222:	b25b      	sxtb	r3, r3
 8000224:	4013      	ands	r3, r2
 8000226:	b25b      	sxtb	r3, r3
 8000228:	b2da      	uxtb	r2, r3
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	701a      	strb	r2, [r3, #0]
 800022e:	e000      	b.n	8000232 <DigitalIO_SetLED+0x5e>
        return;
 8000230:	bf00      	nop
}
 8000232:	3714      	adds	r7, #20
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr
 800023c:	48001015 	.word	0x48001015

08000240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	4603      	mov	r3, r0
 8000248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800024a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024e:	2b00      	cmp	r3, #0
 8000250:	db0b      	blt.n	800026a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	f003 021f 	and.w	r2, r3, #31
 8000258:	4907      	ldr	r1, [pc, #28]	@ (8000278 <__NVIC_EnableIRQ+0x38>)
 800025a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	2001      	movs	r0, #1
 8000262:	fa00 f202 	lsl.w	r2, r0, r2
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	e000e100 	.word	0xe000e100

0800027c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	6039      	str	r1, [r7, #0]
 8000286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028c:	2b00      	cmp	r3, #0
 800028e:	db0a      	blt.n	80002a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	b2da      	uxtb	r2, r3
 8000294:	490c      	ldr	r1, [pc, #48]	@ (80002c8 <__NVIC_SetPriority+0x4c>)
 8000296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029a:	0112      	lsls	r2, r2, #4
 800029c:	b2d2      	uxtb	r2, r2
 800029e:	440b      	add	r3, r1
 80002a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002a4:	e00a      	b.n	80002bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	b2da      	uxtb	r2, r3
 80002aa:	4908      	ldr	r1, [pc, #32]	@ (80002cc <__NVIC_SetPriority+0x50>)
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	f003 030f 	and.w	r3, r3, #15
 80002b2:	3b04      	subs	r3, #4
 80002b4:	0112      	lsls	r2, r2, #4
 80002b6:	b2d2      	uxtb	r2, r2
 80002b8:	440b      	add	r3, r1
 80002ba:	761a      	strb	r2, [r3, #24]
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	e000e100 	.word	0xe000e100
 80002cc:	e000ed00 	.word	0xe000ed00

080002d0 <get_led_state>:
static ButtonCallback buttonCallback = NULL; // Button press callback function
static uint8_t current_led = 0;


// Get function
uint8_t get_led_state(){
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
	return current_led;
 80002d4:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <get_led_state+0x14>)
 80002d6:	781b      	ldrb	r3, [r3, #0]
}
 80002d8:	4618      	mov	r0, r3
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	20000020 	.word	0x20000020

080002e8 <set_led_state>:

// Set function
void set_led_state(uint8_t new_val){
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	71fb      	strb	r3, [r7, #7]
	current_led = new_val;
 80002f2:	4a04      	ldr	r2, [pc, #16]	@ (8000304 <set_led_state+0x1c>)
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	7013      	strb	r3, [r2, #0]
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr
 8000304:	20000020 	.word	0x20000020

08000308 <DigitalIO_Init>:


/**
 * @brief Initialize the Digital I/O module
 */
void DigitalIO_Init(ButtonCallback callback) {
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
    // Store the callback function
    buttonCallback = callback;
 8000310:	4a27      	ldr	r2, [pc, #156]	@ (80003b0 <DigitalIO_Init+0xa8>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	6013      	str	r3, [r2, #0]

    // Enable clocks for GPIOA (button) and GPIOE (LEDs)
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOEEN;
 8000316:	4b27      	ldr	r3, [pc, #156]	@ (80003b4 <DigitalIO_Init+0xac>)
 8000318:	695b      	ldr	r3, [r3, #20]
 800031a:	4a26      	ldr	r2, [pc, #152]	@ (80003b4 <DigitalIO_Init+0xac>)
 800031c:	f443 1308 	orr.w	r3, r3, #2228224	@ 0x220000
 8000320:	6153      	str	r3, [r2, #20]

    // Configure PE8-PE15 (LEDs) as outputs
    uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000322:	4b25      	ldr	r3, [pc, #148]	@ (80003b8 <DigitalIO_Init+0xb0>)
 8000324:	60fb      	str	r3, [r7, #12]
    *led_output_registers = 0x5555; // Set as outputs (01 pattern for each pin)
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	f245 5255 	movw	r2, #21845	@ 0x5555
 800032c:	801a      	strh	r2, [r3, #0]

    // Configure PA0 (User button) as input (default state)
    // No need to modify GPIOA->MODER since input is 00 (default)

    // Configure with pull-down (button connects to VDD when pressed)
    GPIOA->PUPDR &= ~(0x3);
 800032e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000332:	68db      	ldr	r3, [r3, #12]
 8000334:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000338:	f023 0303 	bic.w	r3, r3, #3
 800033c:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= 0x2; // Pull-down (10 pattern)
 800033e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000348:	f043 0302 	orr.w	r3, r3, #2
 800034c:	60d3      	str	r3, [r2, #12]

    // Turn off all LEDs initially
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800034e:	4b1b      	ldr	r3, [pc, #108]	@ (80003bc <DigitalIO_Init+0xb4>)
 8000350:	60bb      	str	r3, [r7, #8]
    *led_register = 0;
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	2200      	movs	r2, #0
 8000356:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000358:	b672      	cpsid	i
}
 800035a:	bf00      	nop
    // Set up button interrupt
    // Disable interrupts while configuring
    __disable_irq();

    // Enable system configuration controller
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800035c:	4b15      	ldr	r3, [pc, #84]	@ (80003b4 <DigitalIO_Init+0xac>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a14      	ldr	r2, [pc, #80]	@ (80003b4 <DigitalIO_Init+0xac>)
 8000362:	f043 0301 	orr.w	r3, r3, #1
 8000366:	6193      	str	r3, [r2, #24]

    // Connect PA0 to EXTI0
    SYSCFG->EXTICR[0] &= ~(0xF); // Clear EXTI0 bits
 8000368:	4b15      	ldr	r3, [pc, #84]	@ (80003c0 <DigitalIO_Init+0xb8>)
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	4a14      	ldr	r2, [pc, #80]	@ (80003c0 <DigitalIO_Init+0xb8>)
 800036e:	f023 030f 	bic.w	r3, r3, #15
 8000372:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA; // PA[0] to EXTI0
 8000374:	4b12      	ldr	r3, [pc, #72]	@ (80003c0 <DigitalIO_Init+0xb8>)
 8000376:	4a12      	ldr	r2, [pc, #72]	@ (80003c0 <DigitalIO_Init+0xb8>)
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	6093      	str	r3, [r2, #8]

    // Configure EXTI0 line for rising edge trigger (button press)
    EXTI->RTSR |= EXTI_RTSR_TR0; // Rising edge trigger
 800037c:	4b11      	ldr	r3, [pc, #68]	@ (80003c4 <DigitalIO_Init+0xbc>)
 800037e:	689b      	ldr	r3, [r3, #8]
 8000380:	4a10      	ldr	r2, [pc, #64]	@ (80003c4 <DigitalIO_Init+0xbc>)
 8000382:	f043 0301 	orr.w	r3, r3, #1
 8000386:	6093      	str	r3, [r2, #8]
    EXTI->IMR |= EXTI_IMR_MR0; // Enable interrupt on line 0
 8000388:	4b0e      	ldr	r3, [pc, #56]	@ (80003c4 <DigitalIO_Init+0xbc>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a0d      	ldr	r2, [pc, #52]	@ (80003c4 <DigitalIO_Init+0xbc>)
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	6013      	str	r3, [r2, #0]

    // Enable EXTI0 interrupt in NVIC
    NVIC_SetPriority(EXTI0_IRQn, 1);
 8000394:	2101      	movs	r1, #1
 8000396:	2006      	movs	r0, #6
 8000398:	f7ff ff70 	bl	800027c <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);
 800039c:	2006      	movs	r0, #6
 800039e:	f7ff ff4f 	bl	8000240 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80003a2:	b662      	cpsie	i
}
 80003a4:	bf00      	nop

    // Re-enable interrupts
    __enable_irq();
}
 80003a6:	bf00      	nop
 80003a8:	3710      	adds	r7, #16
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	2000001c 	.word	0x2000001c
 80003b4:	40021000 	.word	0x40021000
 80003b8:	48001002 	.word	0x48001002
 80003bc:	48001015 	.word	0x48001015
 80003c0:	40010000 	.word	0x40010000
 80003c4:	40010400 	.word	0x40010400

080003c8 <DigitalIO_SetButtonCallback>:

/**
 * @brief Set the button press callback function
 */
void DigitalIO_SetButtonCallback(ButtonCallback callback) {
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
    buttonCallback = callback;
 80003d0:	4a04      	ldr	r2, [pc, #16]	@ (80003e4 <DigitalIO_SetButtonCallback+0x1c>)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	6013      	str	r3, [r2, #0]
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	2000001c 	.word	0x2000001c

080003e8 <next_led>:



// Callback function - moves to next LED
void next_led(void) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
    // Turn off current LED
    DigitalIO_SetLED(get_led_state(), 0);
 80003ec:	f7ff ff70 	bl	80002d0 <get_led_state>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2100      	movs	r1, #0
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff feed 	bl	80001d4 <DigitalIO_SetLED>

    // Move to next LED
    set_led_state((get_led_state()+1) % 8);
 80003fa:	f7ff ff69 	bl	80002d0 <get_led_state>
 80003fe:	4603      	mov	r3, r0
 8000400:	3301      	adds	r3, #1
 8000402:	425a      	negs	r2, r3
 8000404:	f003 0307 	and.w	r3, r3, #7
 8000408:	f002 0207 	and.w	r2, r2, #7
 800040c:	bf58      	it	pl
 800040e:	4253      	negpl	r3, r2
 8000410:	b2db      	uxtb	r3, r3
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff ff68 	bl	80002e8 <set_led_state>


    // Turn on new current LED
    DigitalIO_SetLED(get_led_state(), 1);
 8000418:	f7ff ff5a 	bl	80002d0 <get_led_state>
 800041c:	4603      	mov	r3, r0
 800041e:	2101      	movs	r1, #1
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff fed7 	bl	80001d4 <DigitalIO_SetLED>
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <EXTI0_IRQHandler>:
/**
 * @brief EXTI0 interrupt handler for button press
 *
 * This function must be defined in the global scope as it's an interrupt handler
 */
void EXTI0_IRQHandler(void) {
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
    // Check if EXTI0 interrupt occurred
    if (EXTI->PR & EXTI_PR_PR0) {
 8000430:	4b0a      	ldr	r3, [pc, #40]	@ (800045c <EXTI0_IRQHandler+0x30>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	f003 0301 	and.w	r3, r3, #1
 8000438:	2b00      	cmp	r3, #0
 800043a:	d00c      	beq.n	8000456 <EXTI0_IRQHandler+0x2a>
        // Call the callback function if registered
        if (buttonCallback != NULL) {
 800043c:	4b08      	ldr	r3, [pc, #32]	@ (8000460 <EXTI0_IRQHandler+0x34>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d002      	beq.n	800044a <EXTI0_IRQHandler+0x1e>
            buttonCallback();
 8000444:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <EXTI0_IRQHandler+0x34>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4798      	blx	r3
        }

        // Clear the interrupt flag
        EXTI->PR |= EXTI_PR_PR0;
 800044a:	4b04      	ldr	r3, [pc, #16]	@ (800045c <EXTI0_IRQHandler+0x30>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a03      	ldr	r2, [pc, #12]	@ (800045c <EXTI0_IRQHandler+0x30>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6153      	str	r3, [r2, #20]
    }
}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40010400 	.word	0x40010400
 8000460:	2000001c 	.word	0x2000001c

08000464 <__NVIC_EnableIRQ>:
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800046e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000472:	2b00      	cmp	r3, #0
 8000474:	db0b      	blt.n	800048e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	f003 021f 	and.w	r2, r3, #31
 800047c:	4907      	ldr	r1, [pc, #28]	@ (800049c <__NVIC_EnableIRQ+0x38>)
 800047e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000482:	095b      	lsrs	r3, r3, #5
 8000484:	2001      	movs	r0, #1
 8000486:	fa00 f202 	lsl.w	r2, r0, r2
 800048a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	e000e100 	.word	0xe000e100

080004a0 <__NVIC_SetPriority>:
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	4603      	mov	r3, r0
 80004a8:	6039      	str	r1, [r7, #0]
 80004aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	db0a      	blt.n	80004ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	b2da      	uxtb	r2, r3
 80004b8:	490c      	ldr	r1, [pc, #48]	@ (80004ec <__NVIC_SetPriority+0x4c>)
 80004ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004be:	0112      	lsls	r2, r2, #4
 80004c0:	b2d2      	uxtb	r2, r2
 80004c2:	440b      	add	r3, r1
 80004c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80004c8:	e00a      	b.n	80004e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	b2da      	uxtb	r2, r3
 80004ce:	4908      	ldr	r1, [pc, #32]	@ (80004f0 <__NVIC_SetPriority+0x50>)
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	f003 030f 	and.w	r3, r3, #15
 80004d6:	3b04      	subs	r3, #4
 80004d8:	0112      	lsls	r2, r2, #4
 80004da:	b2d2      	uxtb	r2, r2
 80004dc:	440b      	add	r3, r1
 80004de:	761a      	strb	r2, [r3, #24]
}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	e000e100 	.word	0xe000e100
 80004f0:	e000ed00 	.word	0xe000ed00

080004f4 <new_callback_function>:
#include "../inc/digital_io_d.h"


static LedState_t led_move = LED_IDLE;

void new_callback_function(void){
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
// If there is no delay, act as normal
	if (led_move == LED_IDLE) {
 80004f8:	4b05      	ldr	r3, [pc, #20]	@ (8000510 <new_callback_function+0x1c>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d102      	bne.n	8000506 <new_callback_function+0x12>
		led_move = LED_MOVE_PENDING;
 8000500:	4b03      	ldr	r3, [pc, #12]	@ (8000510 <new_callback_function+0x1c>)
 8000502:	2201      	movs	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]

	}
}
 8000506:	bf00      	nop
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	20000021 	.word	0x20000021

08000514 <TIM2_IRQHandler>:


// Timer IRQ handler
void TIM2_IRQHandler(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
    // Clear interrupt flag
    TIM2->SR &= ~TIM_SR_UIF;
 8000518:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800051c:	691b      	ldr	r3, [r3, #16]
 800051e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000522:	f023 0301 	bic.w	r3, r3, #1
 8000526:	6113      	str	r3, [r2, #16]

    // Check if a button press has requested LED movement
    if (led_move == LED_MOVE_PENDING) {
 8000528:	4b05      	ldr	r3, [pc, #20]	@ (8000540 <TIM2_IRQHandler+0x2c>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d104      	bne.n	800053a <TIM2_IRQHandler+0x26>
        // Execute LED movement
        next_led();
 8000530:	f7ff ff5a 	bl	80003e8 <next_led>
        led_move = LED_IDLE;
 8000534:	4b02      	ldr	r3, [pc, #8]	@ (8000540 <TIM2_IRQHandler+0x2c>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
    }
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000021 	.word	0x20000021

08000544 <initialise_delay>:


// Timer initialization
void initialise_delay(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
    // Enable clock for TIM2
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000548:	4b14      	ldr	r3, [pc, #80]	@ (800059c <initialise_delay+0x58>)
 800054a:	69db      	ldr	r3, [r3, #28]
 800054c:	4a13      	ldr	r2, [pc, #76]	@ (800059c <initialise_delay+0x58>)
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	61d3      	str	r3, [r2, #28]

    // Configure TIM2 for periodic checking (e.g., every 500ms)
    TIM2->PSC = 7999;          // in terms of 1 ms
 8000554:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000558:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800055c:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 2999;          // Get a 3 second delay
 800055e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000562:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000566:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->DIER |= TIM_DIER_UIE;    // Enable update interrupt
 8000568:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	60d3      	str	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN;      // Enable counter
 8000578:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000582:	f043 0301 	orr.w	r3, r3, #1
 8000586:	6013      	str	r3, [r2, #0]

    // Configure NVIC for TIM2
    NVIC_SetPriority(TIM2_IRQn, 1);
 8000588:	2101      	movs	r1, #1
 800058a:	201c      	movs	r0, #28
 800058c:	f7ff ff88 	bl	80004a0 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 8000590:	201c      	movs	r0, #28
 8000592:	f7ff ff67 	bl	8000464 <__NVIC_EnableIRQ>
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40021000 	.word	0x40021000

080005a0 <set_delay>:

// Function to enable or disable delay mode
void set_delay(int enable) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    if (enable) {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d002      	beq.n	80005b4 <set_delay+0x14>
        initialise_delay();
 80005ae:	f7ff ffc9 	bl	8000544 <initialise_delay>
    } else {
        // Optionally disable timer if not needed
        TIM2->CR1 &= ~TIM_CR1_CEN;
    }
}
 80005b2:	e007      	b.n	80005c4 <set_delay+0x24>
        TIM2->CR1 &= ~TIM_CR1_CEN;
 80005b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005be:	f023 0301 	bic.w	r3, r3, #1
 80005c2:	6013      	str	r3, [r2, #0]
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <main>:
#include "../inc/digital_io_a.h"
#include "../inc/digital_io_b.h"
//#include "../inc/digital_io_c.h"
#include "../inc/digital_io_d.h"

int main(void){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	// Basic input output polling -> press button -> action LED
	//main_a();

	// Part B
	// This passed through a function pointer of a function  callback
	DigitalIO_Init(next_led);
 80005d0:	480f      	ldr	r0, [pc, #60]	@ (8000610 <main+0x44>)
 80005d2:	f7ff fe99 	bl	8000308 <DigitalIO_Init>
	 * This then checks if we have set for a delay, if on, the state goes into pending
	 * Timer was initialised in set_delay(), every 3 secs, timer triggers and interrupt
	 * to check if the state is pending, if the state is pending, it will call next_led()
	 * Resulting in a delayed LED switch
	 */
	DigitalIO_SetButtonCallback(new_callback_function);
 80005d6:	480f      	ldr	r0, [pc, #60]	@ (8000614 <main+0x48>)
 80005d8:	f7ff fef6 	bl	80003c8 <DigitalIO_SetButtonCallback>
	set_delay(1);
 80005dc:	2001      	movs	r0, #1
 80005de:	f7ff ffdf 	bl	80005a0 <set_delay>


	while(1){
		if(get_led_state() == 4){
 80005e2:	f7ff fe75 	bl	80002d0 <get_led_state>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	d1fa      	bne.n	80005e2 <main+0x16>
		    // Turn off current LED
		    DigitalIO_SetLED(get_led_state(), 0);
 80005ec:	f7ff fe70 	bl	80002d0 <get_led_state>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff fded 	bl	80001d4 <DigitalIO_SetLED>

		    // Set new LED state
		    set_led_state(6);  // Setting directly to 6 for clarity
 80005fa:	2006      	movs	r0, #6
 80005fc:	f7ff fe74 	bl	80002e8 <set_led_state>

		    // Turn on new LED
		    DigitalIO_SetLED(get_led_state(), 1);
 8000600:	f7ff fe66 	bl	80002d0 <get_led_state>
 8000604:	4603      	mov	r3, r0
 8000606:	2101      	movs	r1, #1
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fde3 	bl	80001d4 <DigitalIO_SetLED>
		if(get_led_state() == 4){
 800060e:	e7e8      	b.n	80005e2 <main+0x16>
 8000610:	080003e9 	.word	0x080003e9
 8000614:	080004f5 	.word	0x080004f5

08000618 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000618:	480d      	ldr	r0, [pc, #52]	@ (8000650 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800061a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800061c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000620:	480c      	ldr	r0, [pc, #48]	@ (8000654 <LoopForever+0x6>)
  ldr r1, =_edata
 8000622:	490d      	ldr	r1, [pc, #52]	@ (8000658 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000624:	4a0d      	ldr	r2, [pc, #52]	@ (800065c <LoopForever+0xe>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000628:	e002      	b.n	8000630 <LoopCopyDataInit>

0800062a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800062c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062e:	3304      	adds	r3, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000634:	d3f9      	bcc.n	800062a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000636:	4a0a      	ldr	r2, [pc, #40]	@ (8000660 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000638:	4c0a      	ldr	r4, [pc, #40]	@ (8000664 <LoopForever+0x16>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800063c:	e001      	b.n	8000642 <LoopFillZerobss>

0800063e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000640:	3204      	adds	r2, #4

08000642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000644:	d3fb      	bcc.n	800063e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000646:	f000 f811 	bl	800066c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064a:	f7ff ffbf 	bl	80005cc <main>

0800064e <LoopForever>:

LoopForever:
  b LoopForever
 800064e:	e7fe      	b.n	800064e <LoopForever>
  ldr   r0, =_estack
 8000650:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000658:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800065c:	080006d4 	.word	0x080006d4
  ldr r2, =_sbss
 8000660:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000664:	20000024 	.word	0x20000024

08000668 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000668:	e7fe      	b.n	8000668 <ADC1_2_IRQHandler>
	...

0800066c <__libc_init_array>:
 800066c:	b570      	push	{r4, r5, r6, lr}
 800066e:	4d0d      	ldr	r5, [pc, #52]	@ (80006a4 <__libc_init_array+0x38>)
 8000670:	4c0d      	ldr	r4, [pc, #52]	@ (80006a8 <__libc_init_array+0x3c>)
 8000672:	1b64      	subs	r4, r4, r5
 8000674:	10a4      	asrs	r4, r4, #2
 8000676:	2600      	movs	r6, #0
 8000678:	42a6      	cmp	r6, r4
 800067a:	d109      	bne.n	8000690 <__libc_init_array+0x24>
 800067c:	4d0b      	ldr	r5, [pc, #44]	@ (80006ac <__libc_init_array+0x40>)
 800067e:	4c0c      	ldr	r4, [pc, #48]	@ (80006b0 <__libc_init_array+0x44>)
 8000680:	f000 f818 	bl	80006b4 <_init>
 8000684:	1b64      	subs	r4, r4, r5
 8000686:	10a4      	asrs	r4, r4, #2
 8000688:	2600      	movs	r6, #0
 800068a:	42a6      	cmp	r6, r4
 800068c:	d105      	bne.n	800069a <__libc_init_array+0x2e>
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f855 3b04 	ldr.w	r3, [r5], #4
 8000694:	4798      	blx	r3
 8000696:	3601      	adds	r6, #1
 8000698:	e7ee      	b.n	8000678 <__libc_init_array+0xc>
 800069a:	f855 3b04 	ldr.w	r3, [r5], #4
 800069e:	4798      	blx	r3
 80006a0:	3601      	adds	r6, #1
 80006a2:	e7f2      	b.n	800068a <__libc_init_array+0x1e>
 80006a4:	080006cc 	.word	0x080006cc
 80006a8:	080006cc 	.word	0x080006cc
 80006ac:	080006cc 	.word	0x080006cc
 80006b0:	080006d0 	.word	0x080006d0

080006b4 <_init>:
 80006b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006b6:	bf00      	nop
 80006b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ba:	bc08      	pop	{r3}
 80006bc:	469e      	mov	lr, r3
 80006be:	4770      	bx	lr

080006c0 <_fini>:
 80006c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c2:	bf00      	nop
 80006c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006c6:	bc08      	pop	{r3}
 80006c8:	469e      	mov	lr, r3
 80006ca:	4770      	bx	lr
