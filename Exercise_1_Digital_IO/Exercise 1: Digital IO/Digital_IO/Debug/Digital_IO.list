
Digital_IO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004bc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000650  08000658  00001658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000650  08000650  00001658  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000650  08000650  00001658  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000650  08000658  00001658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000650  08000650  00001650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000654  08000654  00001654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001658  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001780  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006c0  00000000  00000000  00002e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  000034c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000cd  00000000  00000000  00003600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000151e4  00000000  00000000  000036cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f00  00000000  00000000  000188b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00072cd1  00000000  00000000  0001a7b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008d482  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000318  00000000  00000000  0008d4c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0008d7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000638 	.word	0x08000638

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000638 	.word	0x08000638

080001d4 <EXTI0_IRQHandler>:
/**
 * @brief EXTI0 interrupt handler for button press
 * This common handler checks which part is active and calls
 * the appropriate callback function.
 */
void EXTI0_IRQHandler(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
    // Check if EXTI0 interrupt occurred
    if (EXTI->PR & EXTI_PR_PR0) {
 80001d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000204 <EXTI0_IRQHandler+0x30>)
 80001da:	695b      	ldr	r3, [r3, #20]
 80001dc:	f003 0301 	and.w	r3, r3, #1
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d00c      	beq.n	80001fe <EXTI0_IRQHandler+0x2a>
        // Call the callback function if registered
        if (g_buttonCallback != NULL) {
 80001e4:	4b08      	ldr	r3, [pc, #32]	@ (8000208 <EXTI0_IRQHandler+0x34>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d002      	beq.n	80001f2 <EXTI0_IRQHandler+0x1e>
            g_buttonCallback();
 80001ec:	4b06      	ldr	r3, [pc, #24]	@ (8000208 <EXTI0_IRQHandler+0x34>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4798      	blx	r3
        }

        // Clear the interrupt flag
        EXTI->PR |= EXTI_PR_PR0;
 80001f2:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <EXTI0_IRQHandler+0x30>)
 80001f4:	695b      	ldr	r3, [r3, #20]
 80001f6:	4a03      	ldr	r2, [pc, #12]	@ (8000204 <EXTI0_IRQHandler+0x30>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6153      	str	r3, [r2, #20]
    }
}
 80001fe:	bf00      	nop
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	40010400 	.word	0x40010400
 8000208:	2000001c 	.word	0x2000001c

0800020c <DigitalIO_Init>:
#include "digital_io_a.h"

/**
 * @brief Initialize the Digital I/O module
 */
void DigitalIO_Init(void) {
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
    // Enable clocks for GPIOA (button) and GPIOE (LEDs)
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOEEN;
 8000212:	4b13      	ldr	r3, [pc, #76]	@ (8000260 <DigitalIO_Init+0x54>)
 8000214:	695b      	ldr	r3, [r3, #20]
 8000216:	4a12      	ldr	r2, [pc, #72]	@ (8000260 <DigitalIO_Init+0x54>)
 8000218:	f443 1308 	orr.w	r3, r3, #2228224	@ 0x220000
 800021c:	6153      	str	r3, [r2, #20]

    // Configure PE8-PE15 (LEDs) as outputs
    uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 800021e:	4b11      	ldr	r3, [pc, #68]	@ (8000264 <DigitalIO_Init+0x58>)
 8000220:	607b      	str	r3, [r7, #4]
    *led_output_registers = 0x5555; // Set as outputs (01 pattern for each pin)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000228:	801a      	strh	r2, [r3, #0]

    // Configure PA0 (User button) as input (default state)
    // Configure with pull-down (button connects to VDD when pressed)
    GPIOA->PUPDR &= ~(0x3);
 800022a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800022e:	68db      	ldr	r3, [r3, #12]
 8000230:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000234:	f023 0303 	bic.w	r3, r3, #3
 8000238:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= 0x2; // Pull-down (10 pattern)
 800023a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800023e:	68db      	ldr	r3, [r3, #12]
 8000240:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000244:	f043 0302 	orr.w	r3, r3, #2
 8000248:	60d3      	str	r3, [r2, #12]

    // Turn off all LEDs initially
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800024a:	4b07      	ldr	r3, [pc, #28]	@ (8000268 <DigitalIO_Init+0x5c>)
 800024c:	603b      	str	r3, [r7, #0]
    *led_register = 0;
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	2200      	movs	r2, #0
 8000252:	701a      	strb	r2, [r3, #0]
}
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr
 8000260:	40021000 	.word	0x40021000
 8000264:	48001002 	.word	0x48001002
 8000268:	48001015 	.word	0x48001015

0800026c <DigitalIO_SetLED>:

/**
 * @brief Set the state of a specific LED
 */
void DigitalIO_SetLED(uint8_t ledNumber, uint8_t state) {
 800026c:	b480      	push	{r7}
 800026e:	b085      	sub	sp, #20
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	460a      	mov	r2, r1
 8000276:	71fb      	strb	r3, [r7, #7]
 8000278:	4613      	mov	r3, r2
 800027a:	71bb      	strb	r3, [r7, #6]
    // Validate LED number (0-7)
    if (ledNumber > 7)
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	2b07      	cmp	r3, #7
 8000280:	d822      	bhi.n	80002c8 <DigitalIO_SetLED+0x5c>
        return;

    // Get pointer to LED register
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000282:	4b14      	ldr	r3, [pc, #80]	@ (80002d4 <DigitalIO_SetLED+0x68>)
 8000284:	60fb      	str	r3, [r7, #12]

    if (state)
 8000286:	79bb      	ldrb	r3, [r7, #6]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d00d      	beq.n	80002a8 <DigitalIO_SetLED+0x3c>
        *led_register |= (1 << ledNumber); // Set bit
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	b25a      	sxtb	r2, r3
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	2101      	movs	r1, #1
 8000296:	fa01 f303 	lsl.w	r3, r1, r3
 800029a:	b25b      	sxtb	r3, r3
 800029c:	4313      	orrs	r3, r2
 800029e:	b25b      	sxtb	r3, r3
 80002a0:	b2da      	uxtb	r2, r3
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	701a      	strb	r2, [r3, #0]
 80002a6:	e010      	b.n	80002ca <DigitalIO_SetLED+0x5e>
    else
        *led_register &= ~(1 << ledNumber); // Clear bit
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	b25a      	sxtb	r2, r3
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2101      	movs	r1, #1
 80002b2:	fa01 f303 	lsl.w	r3, r1, r3
 80002b6:	b25b      	sxtb	r3, r3
 80002b8:	43db      	mvns	r3, r3
 80002ba:	b25b      	sxtb	r3, r3
 80002bc:	4013      	ands	r3, r2
 80002be:	b25b      	sxtb	r3, r3
 80002c0:	b2da      	uxtb	r2, r3
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	701a      	strb	r2, [r3, #0]
 80002c6:	e000      	b.n	80002ca <DigitalIO_SetLED+0x5e>
        return;
 80002c8:	bf00      	nop
}
 80002ca:	3714      	adds	r7, #20
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr
 80002d4:	48001015 	.word	0x48001015

080002d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	db0b      	blt.n	8000302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	f003 021f 	and.w	r2, r3, #31
 80002f0:	4907      	ldr	r1, [pc, #28]	@ (8000310 <__NVIC_EnableIRQ+0x38>)
 80002f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f6:	095b      	lsrs	r3, r3, #5
 80002f8:	2001      	movs	r0, #1
 80002fa:	fa00 f202 	lsl.w	r2, r0, r2
 80002fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	e000e100 	.word	0xe000e100

08000314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000324:	2b00      	cmp	r3, #0
 8000326:	db0a      	blt.n	800033e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	b2da      	uxtb	r2, r3
 800032c:	490c      	ldr	r1, [pc, #48]	@ (8000360 <__NVIC_SetPriority+0x4c>)
 800032e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000332:	0112      	lsls	r2, r2, #4
 8000334:	b2d2      	uxtb	r2, r2
 8000336:	440b      	add	r3, r1
 8000338:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800033c:	e00a      	b.n	8000354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	b2da      	uxtb	r2, r3
 8000342:	4908      	ldr	r1, [pc, #32]	@ (8000364 <__NVIC_SetPriority+0x50>)
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	f003 030f 	and.w	r3, r3, #15
 800034a:	3b04      	subs	r3, #4
 800034c:	0112      	lsls	r2, r2, #4
 800034e:	b2d2      	uxtb	r2, r2
 8000350:	440b      	add	r3, r1
 8000352:	761a      	strb	r2, [r3, #24]
}
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	e000e100 	.word	0xe000e100
 8000364:	e000ed00 	.word	0xe000ed00

08000368 <DigitalIO_InitWithCallback>:
static uint8_t current_led = 0;

/**
 * @brief Initialize the Digital I/O module with callback
 */
void DigitalIO_InitWithCallback(ButtonCallback callback) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
    // Store the callback function
    g_buttonCallback = callback;
 8000370:	4a19      	ldr	r2, [pc, #100]	@ (80003d8 <DigitalIO_InitWithCallback+0x70>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	6013      	str	r3, [r2, #0]

    // Set the active flag
    g_part_b_active = 1;
 8000376:	4b19      	ldr	r3, [pc, #100]	@ (80003dc <DigitalIO_InitWithCallback+0x74>)
 8000378:	2201      	movs	r2, #1
 800037a:	701a      	strb	r2, [r3, #0]

    // Call the basic initialization from Part A
    DigitalIO_Init();
 800037c:	f7ff ff46 	bl	800020c <DigitalIO_Init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000380:	b672      	cpsid	i
}
 8000382:	bf00      	nop
    // Set up button interrupt
    // Disable interrupts while configuring
    __disable_irq();

    // Enable system configuration controller
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000384:	4b16      	ldr	r3, [pc, #88]	@ (80003e0 <DigitalIO_InitWithCallback+0x78>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	4a15      	ldr	r2, [pc, #84]	@ (80003e0 <DigitalIO_InitWithCallback+0x78>)
 800038a:	f043 0301 	orr.w	r3, r3, #1
 800038e:	6193      	str	r3, [r2, #24]

    // Connect PA0 to EXTI0
    SYSCFG->EXTICR[0] &= ~(0xF); // Clear EXTI0 bits
 8000390:	4b14      	ldr	r3, [pc, #80]	@ (80003e4 <DigitalIO_InitWithCallback+0x7c>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	4a13      	ldr	r2, [pc, #76]	@ (80003e4 <DigitalIO_InitWithCallback+0x7c>)
 8000396:	f023 030f 	bic.w	r3, r3, #15
 800039a:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA; // PA[0] to EXTI0
 800039c:	4b11      	ldr	r3, [pc, #68]	@ (80003e4 <DigitalIO_InitWithCallback+0x7c>)
 800039e:	4a11      	ldr	r2, [pc, #68]	@ (80003e4 <DigitalIO_InitWithCallback+0x7c>)
 80003a0:	689b      	ldr	r3, [r3, #8]
 80003a2:	6093      	str	r3, [r2, #8]

    // Configure EXTI0 line for rising edge trigger (button press)
    EXTI->RTSR |= EXTI_RTSR_TR0; // Rising edge trigger
 80003a4:	4b10      	ldr	r3, [pc, #64]	@ (80003e8 <DigitalIO_InitWithCallback+0x80>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	4a0f      	ldr	r2, [pc, #60]	@ (80003e8 <DigitalIO_InitWithCallback+0x80>)
 80003aa:	f043 0301 	orr.w	r3, r3, #1
 80003ae:	6093      	str	r3, [r2, #8]
    EXTI->IMR |= EXTI_IMR_MR0; // Enable interrupt on line 0
 80003b0:	4b0d      	ldr	r3, [pc, #52]	@ (80003e8 <DigitalIO_InitWithCallback+0x80>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a0c      	ldr	r2, [pc, #48]	@ (80003e8 <DigitalIO_InitWithCallback+0x80>)
 80003b6:	f043 0301 	orr.w	r3, r3, #1
 80003ba:	6013      	str	r3, [r2, #0]

    // Enable EXTI0 interrupt in NVIC
    NVIC_SetPriority(EXTI0_IRQn, 1);
 80003bc:	2101      	movs	r1, #1
 80003be:	2006      	movs	r0, #6
 80003c0:	f7ff ffa8 	bl	8000314 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);
 80003c4:	2006      	movs	r0, #6
 80003c6:	f7ff ff87 	bl	80002d8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80003ca:	b662      	cpsie	i
}
 80003cc:	bf00      	nop

    // Re-enable interrupts
    __enable_irq();
}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	2000001c 	.word	0x2000001c
 80003dc:	20000020 	.word	0x20000020
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40010000 	.word	0x40010000
 80003e8:	40010400 	.word	0x40010400

080003ec <__NVIC_EnableIRQ>:
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db0b      	blt.n	8000416 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	f003 021f 	and.w	r2, r3, #31
 8000404:	4907      	ldr	r1, [pc, #28]	@ (8000424 <__NVIC_EnableIRQ+0x38>)
 8000406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800040a:	095b      	lsrs	r3, r3, #5
 800040c:	2001      	movs	r0, #1
 800040e:	fa00 f202 	lsl.w	r2, r0, r2
 8000412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	e000e100 	.word	0xe000e100

08000428 <__NVIC_SetPriority>:
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	6039      	str	r1, [r7, #0]
 8000432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000438:	2b00      	cmp	r3, #0
 800043a:	db0a      	blt.n	8000452 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	b2da      	uxtb	r2, r3
 8000440:	490c      	ldr	r1, [pc, #48]	@ (8000474 <__NVIC_SetPriority+0x4c>)
 8000442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000446:	0112      	lsls	r2, r2, #4
 8000448:	b2d2      	uxtb	r2, r2
 800044a:	440b      	add	r3, r1
 800044c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000450:	e00a      	b.n	8000468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	b2da      	uxtb	r2, r3
 8000456:	4908      	ldr	r1, [pc, #32]	@ (8000478 <__NVIC_SetPriority+0x50>)
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	f003 030f 	and.w	r3, r3, #15
 800045e:	3b04      	subs	r3, #4
 8000460:	0112      	lsls	r2, r2, #4
 8000462:	b2d2      	uxtb	r2, r2
 8000464:	440b      	add	r3, r1
 8000466:	761a      	strb	r2, [r3, #24]
}
 8000468:	bf00      	nop
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr
 8000474:	e000e100 	.word	0xe000e100
 8000478:	e000ed00 	.word	0xe000ed00

0800047c <next_led>:

/* Global variables */
static LedState_t led_move = LED_IDLE; // Current LED movement state
static uint8_t current_led = 0; // Track which LED is currently lit

void next_led(void) {
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
    // Turn off current LED
    DigitalIO_SetLED(current_led, 0);
 8000480:	4b0d      	ldr	r3, [pc, #52]	@ (80004b8 <next_led+0x3c>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2100      	movs	r1, #0
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff fef0 	bl	800026c <DigitalIO_SetLED>

    // Move to next LED
    current_led = (current_led + 1) % 8;
 800048c:	4b0a      	ldr	r3, [pc, #40]	@ (80004b8 <next_led+0x3c>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	3301      	adds	r3, #1
 8000492:	425a      	negs	r2, r3
 8000494:	f003 0307 	and.w	r3, r3, #7
 8000498:	f002 0207 	and.w	r2, r2, #7
 800049c:	bf58      	it	pl
 800049e:	4253      	negpl	r3, r2
 80004a0:	b2da      	uxtb	r2, r3
 80004a2:	4b05      	ldr	r3, [pc, #20]	@ (80004b8 <next_led+0x3c>)
 80004a4:	701a      	strb	r2, [r3, #0]

    // Turn on new current LED
    DigitalIO_SetLED(current_led, 1);
 80004a6:	4b04      	ldr	r3, [pc, #16]	@ (80004b8 <next_led+0x3c>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2101      	movs	r1, #1
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff fedd 	bl	800026c <DigitalIO_SetLED>
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000022 	.word	0x20000022

080004bc <delay_button_callback>:


void delay_button_callback(void) {
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0

    // If there is no pending move, request one
    if (led_move == LED_IDLE) {
 80004c0:	4b05      	ldr	r3, [pc, #20]	@ (80004d8 <delay_button_callback+0x1c>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d102      	bne.n	80004ce <delay_button_callback+0x12>
        led_move = LED_MOVE_PENDING;
 80004c8:	4b03      	ldr	r3, [pc, #12]	@ (80004d8 <delay_button_callback+0x1c>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	701a      	strb	r2, [r3, #0]
    }
}
 80004ce:	bf00      	nop
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	20000021 	.word	0x20000021

080004dc <TIM2_IRQHandler>:


void TIM2_IRQHandler(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
    // Clear interrupt flag
    TIM2->SR &= ~TIM_SR_UIF;
 80004e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004e4:	691b      	ldr	r3, [r3, #16]
 80004e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004ea:	f023 0301 	bic.w	r3, r3, #1
 80004ee:	6113      	str	r3, [r2, #16]

    // Check if a button press has requested LED movement
    if (led_move == LED_MOVE_PENDING) {
 80004f0:	4b05      	ldr	r3, [pc, #20]	@ (8000508 <TIM2_IRQHandler+0x2c>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b01      	cmp	r3, #1
 80004f6:	d104      	bne.n	8000502 <TIM2_IRQHandler+0x26>
        // Execute LED movement
        next_led();
 80004f8:	f7ff ffc0 	bl	800047c <next_led>
        led_move = LED_IDLE;
 80004fc:	4b02      	ldr	r3, [pc, #8]	@ (8000508 <TIM2_IRQHandler+0x2c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]
    }
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000021 	.word	0x20000021

0800050c <DigitalIO_InitDelay>:

void DigitalIO_InitDelay(uint16_t delay_ms) {
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	80fb      	strh	r3, [r7, #6]
    // Enable clock for TIM2
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000516:	4b17      	ldr	r3, [pc, #92]	@ (8000574 <DigitalIO_InitDelay+0x68>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	4a16      	ldr	r2, [pc, #88]	@ (8000574 <DigitalIO_InitDelay+0x68>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	61d3      	str	r3, [r2, #28]

    // Configure TIM2 for the specified delay
    TIM2->PSC = 7999;                  // 8MHz / 8000 = 1kHz (1ms tick)
 8000522:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000526:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800052a:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = delay_ms - 1;          // Set period to desired delay
 800052c:	88fb      	ldrh	r3, [r7, #6]
 800052e:	1e5a      	subs	r2, r3, #1
 8000530:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000534:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CNT = 0;                     // Reset counter
 8000536:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800053a:	2200      	movs	r2, #0
 800053c:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM2->DIER = TIM_DIER_UIE;         // Enable update interrupt
 800053e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000542:	2201      	movs	r2, #1
 8000544:	60da      	str	r2, [r3, #12]
    TIM2->CR1 = TIM_CR1_CEN;           // Enable counter
 8000546:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800054a:	2201      	movs	r2, #1
 800054c:	601a      	str	r2, [r3, #0]

    // Configure NVIC for TIM2
    NVIC_SetPriority(TIM2_IRQn, 1);
 800054e:	2101      	movs	r1, #1
 8000550:	201c      	movs	r0, #28
 8000552:	f7ff ff69 	bl	8000428 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn);
 8000556:	201c      	movs	r0, #28
 8000558:	f7ff ff48 	bl	80003ec <__NVIC_EnableIRQ>

    // Initialize with LED 0 on
    DigitalIO_SetLED(0, 1);
 800055c:	2101      	movs	r1, #1
 800055e:	2000      	movs	r0, #0
 8000560:	f7ff fe84 	bl	800026c <DigitalIO_SetLED>
    current_led = 0;
 8000564:	4b04      	ldr	r3, [pc, #16]	@ (8000578 <DigitalIO_InitDelay+0x6c>)
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40021000 	.word	0x40021000
 8000578:	20000022 	.word	0x20000022

0800057c <main>:
 *********************************************/
#ifdef DEMO_PART_D
#include "digital_io_d.h"


int main(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
    // Initialize the digital I/O
    DigitalIO_Init();
 8000580:	f7ff fe44 	bl	800020c <DigitalIO_Init>

    // EXPLICIT: Initialize button with callback
    DigitalIO_InitWithCallback(delay_button_callback);
 8000584:	4804      	ldr	r0, [pc, #16]	@ (8000598 <main+0x1c>)
 8000586:	f7ff feef 	bl	8000368 <DigitalIO_InitWithCallback>

    // Initialize delay mechanism (3 second delay)
    DigitalIO_InitDelay(3000);
 800058a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800058e:	f7ff ffbd 	bl	800050c <DigitalIO_InitDelay>

    // Main loop
    for(;;) {
 8000592:	bf00      	nop
 8000594:	e7fd      	b.n	8000592 <main+0x16>
 8000596:	bf00      	nop
 8000598:	080004bd 	.word	0x080004bd

0800059c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800059c:	480d      	ldr	r0, [pc, #52]	@ (80005d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800059e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a4:	480c      	ldr	r0, [pc, #48]	@ (80005d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005a6:	490d      	ldr	r1, [pc, #52]	@ (80005dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a8:	4a0d      	ldr	r2, [pc, #52]	@ (80005e0 <LoopForever+0xe>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ac:	e002      	b.n	80005b4 <LoopCopyDataInit>

080005ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b2:	3304      	adds	r3, #4

080005b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b8:	d3f9      	bcc.n	80005ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ba:	4a0a      	ldr	r2, [pc, #40]	@ (80005e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005bc:	4c0a      	ldr	r4, [pc, #40]	@ (80005e8 <LoopForever+0x16>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c0:	e001      	b.n	80005c6 <LoopFillZerobss>

080005c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c4:	3204      	adds	r2, #4

080005c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c8:	d3fb      	bcc.n	80005c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ca:	f000 f811 	bl	80005f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ce:	f7ff ffd5 	bl	800057c <main>

080005d2 <LoopForever>:

LoopForever:
  b LoopForever
 80005d2:	e7fe      	b.n	80005d2 <LoopForever>
  ldr   r0, =_estack
 80005d4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80005d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005e0:	08000658 	.word	0x08000658
  ldr r2, =_sbss
 80005e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005e8:	20000024 	.word	0x20000024

080005ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC1_2_IRQHandler>
	...

080005f0 <__libc_init_array>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	4d0d      	ldr	r5, [pc, #52]	@ (8000628 <__libc_init_array+0x38>)
 80005f4:	4c0d      	ldr	r4, [pc, #52]	@ (800062c <__libc_init_array+0x3c>)
 80005f6:	1b64      	subs	r4, r4, r5
 80005f8:	10a4      	asrs	r4, r4, #2
 80005fa:	2600      	movs	r6, #0
 80005fc:	42a6      	cmp	r6, r4
 80005fe:	d109      	bne.n	8000614 <__libc_init_array+0x24>
 8000600:	4d0b      	ldr	r5, [pc, #44]	@ (8000630 <__libc_init_array+0x40>)
 8000602:	4c0c      	ldr	r4, [pc, #48]	@ (8000634 <__libc_init_array+0x44>)
 8000604:	f000 f818 	bl	8000638 <_init>
 8000608:	1b64      	subs	r4, r4, r5
 800060a:	10a4      	asrs	r4, r4, #2
 800060c:	2600      	movs	r6, #0
 800060e:	42a6      	cmp	r6, r4
 8000610:	d105      	bne.n	800061e <__libc_init_array+0x2e>
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f855 3b04 	ldr.w	r3, [r5], #4
 8000618:	4798      	blx	r3
 800061a:	3601      	adds	r6, #1
 800061c:	e7ee      	b.n	80005fc <__libc_init_array+0xc>
 800061e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000622:	4798      	blx	r3
 8000624:	3601      	adds	r6, #1
 8000626:	e7f2      	b.n	800060e <__libc_init_array+0x1e>
 8000628:	08000650 	.word	0x08000650
 800062c:	08000650 	.word	0x08000650
 8000630:	08000650 	.word	0x08000650
 8000634:	08000654 	.word	0x08000654

08000638 <_init>:
 8000638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063a:	bf00      	nop
 800063c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800063e:	bc08      	pop	{r3}
 8000640:	469e      	mov	lr, r3
 8000642:	4770      	bx	lr

08000644 <_fini>:
 8000644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000646:	bf00      	nop
 8000648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800064a:	bc08      	pop	{r3}
 800064c:	469e      	mov	lr, r3
 800064e:	4770      	bx	lr
