
Digital_IO_A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000448  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005dc  080005e4  000015e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005dc  080005dc  000015e4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080005dc  080005dc  000015e4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080005dc  080005e4  000015e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005dc  080005dc  000015dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005e0  080005e0  000015e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000015e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000015e4  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000be4  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000308  00000000  00000000  000021f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a8  00000000  00000000  00002500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000071  00000000  00000000  000025a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014f21  00000000  00000000  00002619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000d4e  00000000  00000000  0001753a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00072b3f  00000000  00000000  00018288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008adc7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001ac  00000000  00000000  0008ae0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0008afb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005c4 	.word	0x080005c4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080005c4 	.word	0x080005c4

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	@ (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	@ (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <DigitalIO_Init>:
static ButtonCallback buttonCallback = NULL; // Button press callback function

/**
 * @brief Initialize the Digital I/O module
 */
void DigitalIO_Init(ButtonCallback callback) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
    // Store the callback function
    buttonCallback = callback;
 800026c:	4a27      	ldr	r2, [pc, #156]	@ (800030c <DigitalIO_Init+0xa8>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	6013      	str	r3, [r2, #0]

    // Enable clocks for GPIOA (button) and GPIOE (LEDs)
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOEEN;
 8000272:	4b27      	ldr	r3, [pc, #156]	@ (8000310 <DigitalIO_Init+0xac>)
 8000274:	695b      	ldr	r3, [r3, #20]
 8000276:	4a26      	ldr	r2, [pc, #152]	@ (8000310 <DigitalIO_Init+0xac>)
 8000278:	f443 1308 	orr.w	r3, r3, #2228224	@ 0x220000
 800027c:	6153      	str	r3, [r2, #20]

    // Configure PE8-PE15 (LEDs) as outputs
    uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 800027e:	4b25      	ldr	r3, [pc, #148]	@ (8000314 <DigitalIO_Init+0xb0>)
 8000280:	60fb      	str	r3, [r7, #12]
    *led_output_registers = 0x5555; // Set as outputs (01 pattern for each pin)
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000288:	801a      	strh	r2, [r3, #0]

    // Configure PA0 (User button) as input (default state)
    // No need to modify GPIOA->MODER since input is 00 (default)

    // Configure with pull-down (button connects to VDD when pressed)
    GPIOA->PUPDR &= ~(0x3);
 800028a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000294:	f023 0303 	bic.w	r3, r3, #3
 8000298:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= 0x2; // Pull-down (10 pattern)
 800029a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002a4:	f043 0302 	orr.w	r3, r3, #2
 80002a8:	60d3      	str	r3, [r2, #12]

    // Turn off all LEDs initially
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80002aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000318 <DigitalIO_Init+0xb4>)
 80002ac:	60bb      	str	r3, [r7, #8]
    *led_register = 0;
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	2200      	movs	r2, #0
 80002b2:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002b4:	b672      	cpsid	i
}
 80002b6:	bf00      	nop
    // Set up button interrupt
    // Disable interrupts while configuring
    __disable_irq();

    // Enable system configuration controller
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002b8:	4b15      	ldr	r3, [pc, #84]	@ (8000310 <DigitalIO_Init+0xac>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a14      	ldr	r2, [pc, #80]	@ (8000310 <DigitalIO_Init+0xac>)
 80002be:	f043 0301 	orr.w	r3, r3, #1
 80002c2:	6193      	str	r3, [r2, #24]

    // Connect PA0 to EXTI0
    SYSCFG->EXTICR[0] &= ~(0xF); // Clear EXTI0 bits
 80002c4:	4b15      	ldr	r3, [pc, #84]	@ (800031c <DigitalIO_Init+0xb8>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	4a14      	ldr	r2, [pc, #80]	@ (800031c <DigitalIO_Init+0xb8>)
 80002ca:	f023 030f 	bic.w	r3, r3, #15
 80002ce:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA; // PA[0] to EXTI0
 80002d0:	4b12      	ldr	r3, [pc, #72]	@ (800031c <DigitalIO_Init+0xb8>)
 80002d2:	4a12      	ldr	r2, [pc, #72]	@ (800031c <DigitalIO_Init+0xb8>)
 80002d4:	689b      	ldr	r3, [r3, #8]
 80002d6:	6093      	str	r3, [r2, #8]

    // Configure EXTI0 line for rising edge trigger (button press)
    EXTI->RTSR |= EXTI_RTSR_TR0; // Rising edge trigger
 80002d8:	4b11      	ldr	r3, [pc, #68]	@ (8000320 <DigitalIO_Init+0xbc>)
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	4a10      	ldr	r2, [pc, #64]	@ (8000320 <DigitalIO_Init+0xbc>)
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	6093      	str	r3, [r2, #8]
    EXTI->IMR |= EXTI_IMR_MR0; // Enable interrupt on line 0
 80002e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000320 <DigitalIO_Init+0xbc>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000320 <DigitalIO_Init+0xbc>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6013      	str	r3, [r2, #0]

    // Enable EXTI0 interrupt in NVIC
    NVIC_SetPriority(EXTI0_IRQn, 1);
 80002f0:	2101      	movs	r1, #1
 80002f2:	2006      	movs	r0, #6
 80002f4:	f7ff ff8c 	bl	8000210 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);
 80002f8:	2006      	movs	r0, #6
 80002fa:	f7ff ff6b 	bl	80001d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80002fe:	b662      	cpsie	i
}
 8000300:	bf00      	nop

    // Re-enable interrupts
    __enable_irq();
}
 8000302:	bf00      	nop
 8000304:	3710      	adds	r7, #16
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	2000001c 	.word	0x2000001c
 8000310:	40021000 	.word	0x40021000
 8000314:	48001002 	.word	0x48001002
 8000318:	48001015 	.word	0x48001015
 800031c:	40010000 	.word	0x40010000
 8000320:	40010400 	.word	0x40010400

08000324 <DigitalIO_SetButtonCallback>:

/**
 * @brief Set the button press callback function
 */
void DigitalIO_SetButtonCallback(ButtonCallback callback) {
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
    buttonCallback = callback;
 800032c:	4a04      	ldr	r2, [pc, #16]	@ (8000340 <DigitalIO_SetButtonCallback+0x1c>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	6013      	str	r3, [r2, #0]
}
 8000332:	bf00      	nop
 8000334:	370c      	adds	r7, #12
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	2000001c 	.word	0x2000001c

08000344 <DigitalIO_SetLED>:

/**
 * @brief Set the state of a specific LED
 */
void DigitalIO_SetLED(uint8_t ledNumber, uint8_t state) {
 8000344:	b480      	push	{r7}
 8000346:	b085      	sub	sp, #20
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	460a      	mov	r2, r1
 800034e:	71fb      	strb	r3, [r7, #7]
 8000350:	4613      	mov	r3, r2
 8000352:	71bb      	strb	r3, [r7, #6]
    // Validate LED number (0-7)
    if (ledNumber > 7)
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	2b07      	cmp	r3, #7
 8000358:	d822      	bhi.n	80003a0 <DigitalIO_SetLED+0x5c>
        return;

    // Get pointer to LED register
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800035a:	4b14      	ldr	r3, [pc, #80]	@ (80003ac <DigitalIO_SetLED+0x68>)
 800035c:	60fb      	str	r3, [r7, #12]

    if (state)
 800035e:	79bb      	ldrb	r3, [r7, #6]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d00d      	beq.n	8000380 <DigitalIO_SetLED+0x3c>
        *led_register |= (1 << ledNumber);  // Set bit
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	b25a      	sxtb	r2, r3
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	2101      	movs	r1, #1
 800036e:	fa01 f303 	lsl.w	r3, r1, r3
 8000372:	b25b      	sxtb	r3, r3
 8000374:	4313      	orrs	r3, r2
 8000376:	b25b      	sxtb	r3, r3
 8000378:	b2da      	uxtb	r2, r3
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	701a      	strb	r2, [r3, #0]
 800037e:	e010      	b.n	80003a2 <DigitalIO_SetLED+0x5e>
    else
        *led_register &= ~(1 << ledNumber); // Clear bit
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	b25a      	sxtb	r2, r3
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	2101      	movs	r1, #1
 800038a:	fa01 f303 	lsl.w	r3, r1, r3
 800038e:	b25b      	sxtb	r3, r3
 8000390:	43db      	mvns	r3, r3
 8000392:	b25b      	sxtb	r3, r3
 8000394:	4013      	ands	r3, r2
 8000396:	b25b      	sxtb	r3, r3
 8000398:	b2da      	uxtb	r2, r3
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	701a      	strb	r2, [r3, #0]
 800039e:	e000      	b.n	80003a2 <DigitalIO_SetLED+0x5e>
        return;
 80003a0:	bf00      	nop
}
 80003a2:	3714      	adds	r7, #20
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	48001015 	.word	0x48001015

080003b0 <DigitalIO_SetLEDPattern>:

/**
 * @brief Set all LEDs according to a pattern
 */
void DigitalIO_SetLEDPattern(uint8_t pattern) {
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]
    // Update the hardware register directly
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80003ba:	4b05      	ldr	r3, [pc, #20]	@ (80003d0 <DigitalIO_SetLEDPattern+0x20>)
 80003bc:	60fb      	str	r3, [r7, #12]
    *led_register = pattern;
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	79fa      	ldrb	r2, [r7, #7]
 80003c2:	701a      	strb	r2, [r3, #0]
}
 80003c4:	bf00      	nop
 80003c6:	3714      	adds	r7, #20
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	48001015 	.word	0x48001015

080003d4 <EXTI0_IRQHandler>:
/**
 * @brief EXTI0 interrupt handler for button press
 *
 * This function must be defined in the global scope as it's an interrupt handler
 */
void EXTI0_IRQHandler(void) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
    // Check if EXTI0 interrupt occurred
    if (EXTI->PR & EXTI_PR_PR0) {
 80003d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000404 <EXTI0_IRQHandler+0x30>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	f003 0301 	and.w	r3, r3, #1
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d00c      	beq.n	80003fe <EXTI0_IRQHandler+0x2a>
        // Call the callback function if registered
        if (buttonCallback != NULL) {
 80003e4:	4b08      	ldr	r3, [pc, #32]	@ (8000408 <EXTI0_IRQHandler+0x34>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d002      	beq.n	80003f2 <EXTI0_IRQHandler+0x1e>
            buttonCallback();
 80003ec:	4b06      	ldr	r3, [pc, #24]	@ (8000408 <EXTI0_IRQHandler+0x34>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4798      	blx	r3
        }

        // Clear the interrupt flag
        EXTI->PR |= EXTI_PR_PR0;
 80003f2:	4b04      	ldr	r3, [pc, #16]	@ (8000404 <EXTI0_IRQHandler+0x30>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a03      	ldr	r2, [pc, #12]	@ (8000404 <EXTI0_IRQHandler+0x30>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6153      	str	r3, [r2, #20]
    }
}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40010400 	.word	0x40010400
 8000408:	2000001c 	.word	0x2000001c

0800040c <next_led>:

// Global variable to track current LED
uint8_t current_led = 0;

// Callback function - moves to next LED
void next_led(void) {
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
    // Turn off current LED
    DigitalIO_SetLED(current_led, 0);
 8000410:	4b0d      	ldr	r3, [pc, #52]	@ (8000448 <next_led+0x3c>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f7ff ff94 	bl	8000344 <DigitalIO_SetLED>

    // Move to next LED
    current_led = (current_led + 1) % 8;
 800041c:	4b0a      	ldr	r3, [pc, #40]	@ (8000448 <next_led+0x3c>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	3301      	adds	r3, #1
 8000422:	425a      	negs	r2, r3
 8000424:	f003 0307 	and.w	r3, r3, #7
 8000428:	f002 0207 	and.w	r2, r2, #7
 800042c:	bf58      	it	pl
 800042e:	4253      	negpl	r3, r2
 8000430:	b2da      	uxtb	r2, r3
 8000432:	4b05      	ldr	r3, [pc, #20]	@ (8000448 <next_led+0x3c>)
 8000434:	701a      	strb	r2, [r3, #0]

    // Turn on new current LED
    DigitalIO_SetLED(current_led, 1);
 8000436:	4b04      	ldr	r3, [pc, #16]	@ (8000448 <next_led+0x3c>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2101      	movs	r1, #1
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff ff81 	bl	8000344 <DigitalIO_SetLED>
}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000020 	.word	0x20000020

0800044c <toggle_all_leds>:

// Alternate callback - toggles all LEDs
void toggle_all_leds(void) {
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
    static uint8_t all_on = 0;

    if (all_on) {
 8000450:	4b09      	ldr	r3, [pc, #36]	@ (8000478 <toggle_all_leds+0x2c>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d006      	beq.n	8000466 <toggle_all_leds+0x1a>
        // Turn all LEDs off
        DigitalIO_SetLEDPattern(0);
 8000458:	2000      	movs	r0, #0
 800045a:	f7ff ffa9 	bl	80003b0 <DigitalIO_SetLEDPattern>
        all_on = 0;
 800045e:	4b06      	ldr	r3, [pc, #24]	@ (8000478 <toggle_all_leds+0x2c>)
 8000460:	2200      	movs	r2, #0
 8000462:	701a      	strb	r2, [r3, #0]
    } else {
        // Turn all LEDs on
        DigitalIO_SetLEDPattern(0xFF);
        all_on = 1;
    }
}
 8000464:	e005      	b.n	8000472 <toggle_all_leds+0x26>
        DigitalIO_SetLEDPattern(0xFF);
 8000466:	20ff      	movs	r0, #255	@ 0xff
 8000468:	f7ff ffa2 	bl	80003b0 <DigitalIO_SetLEDPattern>
        all_on = 1;
 800046c:	4b02      	ldr	r3, [pc, #8]	@ (8000478 <toggle_all_leds+0x2c>)
 800046e:	2201      	movs	r2, #1
 8000470:	701a      	strb	r2, [r3, #0]
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	20000021 	.word	0x20000021

0800047c <main>:

int main(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
    // Initialize with first callback
    DigitalIO_Init(next_led);
 8000482:	4824      	ldr	r0, [pc, #144]	@ (8000514 <main+0x98>)
 8000484:	f7ff feee 	bl	8000264 <DigitalIO_Init>

    // Turn on LD3 (first LED) initially
    DigitalIO_SetLED(0, 1);
 8000488:	2101      	movs	r1, #1
 800048a:	2000      	movs	r0, #0
 800048c:	f7ff ff5a 	bl	8000344 <DigitalIO_SetLED>
    current_led = 0;
 8000490:	4b21      	ldr	r3, [pc, #132]	@ (8000518 <main+0x9c>)
 8000492:	2200      	movs	r2, #0
 8000494:	701a      	strb	r2, [r3, #0]

    uint32_t counter = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	617b      	str	r3, [r7, #20]
    uint8_t callback_switched = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	74fb      	strb	r3, [r7, #19]

    /* Loop forever */
    for(;;) {
        // Count to ~5 seconds then change the callback
        counter++;
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	3301      	adds	r3, #1
 80004a2:	617b      	str	r3, [r7, #20]
        if (counter > 5000000 && !callback_switched) {
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	4a1d      	ldr	r2, [pc, #116]	@ (800051c <main+0xa0>)
 80004a8:	4293      	cmp	r3, r2
 80004aa:	d9f8      	bls.n	800049e <main+0x22>
 80004ac:	7cfb      	ldrb	r3, [r7, #19]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d1f5      	bne.n	800049e <main+0x22>
            // Change to the second callback
            DigitalIO_SetButtonCallback(toggle_all_leds);
 80004b2:	481b      	ldr	r0, [pc, #108]	@ (8000520 <main+0xa4>)
 80004b4:	f7ff ff36 	bl	8000324 <DigitalIO_SetButtonCallback>

            // Flash LEDs to indicate callback changed
            DigitalIO_SetLEDPattern(0xFF);
 80004b8:	20ff      	movs	r0, #255	@ 0xff
 80004ba:	f7ff ff79 	bl	80003b0 <DigitalIO_SetLEDPattern>
            for(volatile uint32_t i = 0; i < 500000; i++);
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]
 80004c2:	e002      	b.n	80004ca <main+0x4e>
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	3301      	adds	r3, #1
 80004c8:	60fb      	str	r3, [r7, #12]
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	4a15      	ldr	r2, [pc, #84]	@ (8000524 <main+0xa8>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d9f8      	bls.n	80004c4 <main+0x48>
            DigitalIO_SetLEDPattern(0x00);
 80004d2:	2000      	movs	r0, #0
 80004d4:	f7ff ff6c 	bl	80003b0 <DigitalIO_SetLEDPattern>
            for(volatile uint32_t i = 0; i < 500000; i++);
 80004d8:	2300      	movs	r3, #0
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	e002      	b.n	80004e4 <main+0x68>
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	3301      	adds	r3, #1
 80004e2:	60bb      	str	r3, [r7, #8]
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000524 <main+0xa8>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d9f8      	bls.n	80004de <main+0x62>
            DigitalIO_SetLEDPattern(0xFF);
 80004ec:	20ff      	movs	r0, #255	@ 0xff
 80004ee:	f7ff ff5f 	bl	80003b0 <DigitalIO_SetLEDPattern>
            for(volatile uint32_t i = 0; i < 500000; i++);
 80004f2:	2300      	movs	r3, #0
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	e002      	b.n	80004fe <main+0x82>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	3301      	adds	r3, #1
 80004fc:	607b      	str	r3, [r7, #4]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4a08      	ldr	r2, [pc, #32]	@ (8000524 <main+0xa8>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d9f8      	bls.n	80004f8 <main+0x7c>
            DigitalIO_SetLEDPattern(0x00);
 8000506:	2000      	movs	r0, #0
 8000508:	f7ff ff52 	bl	80003b0 <DigitalIO_SetLEDPattern>

            callback_switched = 1;
 800050c:	2301      	movs	r3, #1
 800050e:	74fb      	strb	r3, [r7, #19]
        counter++;
 8000510:	e7c5      	b.n	800049e <main+0x22>
 8000512:	bf00      	nop
 8000514:	0800040d 	.word	0x0800040d
 8000518:	20000020 	.word	0x20000020
 800051c:	004c4b40 	.word	0x004c4b40
 8000520:	0800044d 	.word	0x0800044d
 8000524:	0007a11f 	.word	0x0007a11f

08000528 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000528:	480d      	ldr	r0, [pc, #52]	@ (8000560 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800052a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800052c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000530:	480c      	ldr	r0, [pc, #48]	@ (8000564 <LoopForever+0x6>)
  ldr r1, =_edata
 8000532:	490d      	ldr	r1, [pc, #52]	@ (8000568 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000534:	4a0d      	ldr	r2, [pc, #52]	@ (800056c <LoopForever+0xe>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000538:	e002      	b.n	8000540 <LoopCopyDataInit>

0800053a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800053c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053e:	3304      	adds	r3, #4

08000540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000544:	d3f9      	bcc.n	800053a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000546:	4a0a      	ldr	r2, [pc, #40]	@ (8000570 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000548:	4c0a      	ldr	r4, [pc, #40]	@ (8000574 <LoopForever+0x16>)
  movs r3, #0
 800054a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800054c:	e001      	b.n	8000552 <LoopFillZerobss>

0800054e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000550:	3204      	adds	r2, #4

08000552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000554:	d3fb      	bcc.n	800054e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000556:	f000 f811 	bl	800057c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800055a:	f7ff ff8f 	bl	800047c <main>

0800055e <LoopForever>:

LoopForever:
  b LoopForever
 800055e:	e7fe      	b.n	800055e <LoopForever>
  ldr   r0, =_estack
 8000560:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000568:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800056c:	080005e4 	.word	0x080005e4
  ldr r2, =_sbss
 8000570:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000574:	20000024 	.word	0x20000024

08000578 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000578:	e7fe      	b.n	8000578 <ADC1_2_IRQHandler>
	...

0800057c <__libc_init_array>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	4d0d      	ldr	r5, [pc, #52]	@ (80005b4 <__libc_init_array+0x38>)
 8000580:	4c0d      	ldr	r4, [pc, #52]	@ (80005b8 <__libc_init_array+0x3c>)
 8000582:	1b64      	subs	r4, r4, r5
 8000584:	10a4      	asrs	r4, r4, #2
 8000586:	2600      	movs	r6, #0
 8000588:	42a6      	cmp	r6, r4
 800058a:	d109      	bne.n	80005a0 <__libc_init_array+0x24>
 800058c:	4d0b      	ldr	r5, [pc, #44]	@ (80005bc <__libc_init_array+0x40>)
 800058e:	4c0c      	ldr	r4, [pc, #48]	@ (80005c0 <__libc_init_array+0x44>)
 8000590:	f000 f818 	bl	80005c4 <_init>
 8000594:	1b64      	subs	r4, r4, r5
 8000596:	10a4      	asrs	r4, r4, #2
 8000598:	2600      	movs	r6, #0
 800059a:	42a6      	cmp	r6, r4
 800059c:	d105      	bne.n	80005aa <__libc_init_array+0x2e>
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80005a4:	4798      	blx	r3
 80005a6:	3601      	adds	r6, #1
 80005a8:	e7ee      	b.n	8000588 <__libc_init_array+0xc>
 80005aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80005ae:	4798      	blx	r3
 80005b0:	3601      	adds	r6, #1
 80005b2:	e7f2      	b.n	800059a <__libc_init_array+0x1e>
 80005b4:	080005dc 	.word	0x080005dc
 80005b8:	080005dc 	.word	0x080005dc
 80005bc:	080005dc 	.word	0x080005dc
 80005c0:	080005e0 	.word	0x080005e0

080005c4 <_init>:
 80005c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c6:	bf00      	nop
 80005c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ca:	bc08      	pop	{r3}
 80005cc:	469e      	mov	lr, r3
 80005ce:	4770      	bx	lr

080005d0 <_fini>:
 80005d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005d2:	bf00      	nop
 80005d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005d6:	bc08      	pop	{r3}
 80005d8:	469e      	mov	lr, r3
 80005da:	4770      	bx	lr
