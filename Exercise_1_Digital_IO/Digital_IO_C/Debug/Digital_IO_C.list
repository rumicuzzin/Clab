
Digital_IO_C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004b0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000644  0800064c  0000164c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000644  08000644  0000164c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000644  08000644  0000164c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000644  0800064c  0000164c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000644  08000644  00001644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000648  08000648  00001648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000164c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000164c  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c46  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000357  00000000  00000000  000022c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  00002620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000007d  00000000  00000000  000026d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014f21  00000000  00000000  00002755  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000d64  00000000  00000000  00017676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00072b5f  00000000  00000000  000183da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008af39  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000204  00000000  00000000  0008af7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0008b180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800062c 	.word	0x0800062c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800062c 	.word	0x0800062c

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	@ (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	@ (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <DigitalIO_Init>:
static ButtonCallback buttonCallback = NULL; // Button press callback function

/**
 * @brief Initialize the Digital I/O module
 */
void DigitalIO_Init(ButtonCallback callback) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
    // Store the callback function
    buttonCallback = callback;
 800026c:	4a28      	ldr	r2, [pc, #160]	@ (8000310 <DigitalIO_Init+0xac>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	6013      	str	r3, [r2, #0]

    // Enable clocks for GPIOA (button) and GPIOE (LEDs)
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOEEN;
 8000272:	4b28      	ldr	r3, [pc, #160]	@ (8000314 <DigitalIO_Init+0xb0>)
 8000274:	695b      	ldr	r3, [r3, #20]
 8000276:	4a27      	ldr	r2, [pc, #156]	@ (8000314 <DigitalIO_Init+0xb0>)
 8000278:	f443 1308 	orr.w	r3, r3, #2228224	@ 0x220000
 800027c:	6153      	str	r3, [r2, #20]

    // Configure PE8-PE15 (LEDs) as outputs
    uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 800027e:	4b26      	ldr	r3, [pc, #152]	@ (8000318 <DigitalIO_Init+0xb4>)
 8000280:	60fb      	str	r3, [r7, #12]
    *led_output_registers = 0x5555; // Set as outputs (01 pattern for each pin)
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000288:	801a      	strh	r2, [r3, #0]

    // Configure PA0 (User button) as input (default state)
    // No need to modify GPIOA->MODER since input is 00 (default)

    // Configure with pull-down (button connects to VDD when pressed)
    GPIOA->PUPDR &= ~(0x3);
 800028a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000294:	f023 0303 	bic.w	r3, r3, #3
 8000298:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= 0x2; // Pull-down (10 pattern)
 800029a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002a4:	f043 0302 	orr.w	r3, r3, #2
 80002a8:	60d3      	str	r3, [r2, #12]

    // Turn off all LEDs initially
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80002aa:	4b1c      	ldr	r3, [pc, #112]	@ (800031c <DigitalIO_Init+0xb8>)
 80002ac:	60bb      	str	r3, [r7, #8]
    *led_register = 0;
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	2200      	movs	r2, #0
 80002b2:	701a      	strb	r2, [r3, #0]
    ledStates = 0; // Initialize internal state
 80002b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000320 <DigitalIO_Init+0xbc>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002ba:	b672      	cpsid	i
}
 80002bc:	bf00      	nop
    // Set up button interrupt
    // Disable interrupts while configuring
    __disable_irq();

    // Enable system configuration controller
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002be:	4b15      	ldr	r3, [pc, #84]	@ (8000314 <DigitalIO_Init+0xb0>)
 80002c0:	699b      	ldr	r3, [r3, #24]
 80002c2:	4a14      	ldr	r2, [pc, #80]	@ (8000314 <DigitalIO_Init+0xb0>)
 80002c4:	f043 0301 	orr.w	r3, r3, #1
 80002c8:	6193      	str	r3, [r2, #24]

    // Connect PA0 to EXTI0
    SYSCFG->EXTICR[0] &= ~(0xF); // Clear EXTI0 bits
 80002ca:	4b16      	ldr	r3, [pc, #88]	@ (8000324 <DigitalIO_Init+0xc0>)
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	4a15      	ldr	r2, [pc, #84]	@ (8000324 <DigitalIO_Init+0xc0>)
 80002d0:	f023 030f 	bic.w	r3, r3, #15
 80002d4:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA; // PA[0] to EXTI0
 80002d6:	4b13      	ldr	r3, [pc, #76]	@ (8000324 <DigitalIO_Init+0xc0>)
 80002d8:	4a12      	ldr	r2, [pc, #72]	@ (8000324 <DigitalIO_Init+0xc0>)
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	6093      	str	r3, [r2, #8]

    // Configure EXTI0 line for rising edge trigger (button press)
    EXTI->RTSR |= EXTI_RTSR_TR0; // Rising edge trigger
 80002de:	4b12      	ldr	r3, [pc, #72]	@ (8000328 <DigitalIO_Init+0xc4>)
 80002e0:	689b      	ldr	r3, [r3, #8]
 80002e2:	4a11      	ldr	r2, [pc, #68]	@ (8000328 <DigitalIO_Init+0xc4>)
 80002e4:	f043 0301 	orr.w	r3, r3, #1
 80002e8:	6093      	str	r3, [r2, #8]
    EXTI->IMR |= EXTI_IMR_MR0; // Enable interrupt on line 0
 80002ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000328 <DigitalIO_Init+0xc4>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000328 <DigitalIO_Init+0xc4>)
 80002f0:	f043 0301 	orr.w	r3, r3, #1
 80002f4:	6013      	str	r3, [r2, #0]

    // Enable EXTI0 interrupt in NVIC
    NVIC_SetPriority(EXTI0_IRQn, 1);
 80002f6:	2101      	movs	r1, #1
 80002f8:	2006      	movs	r0, #6
 80002fa:	f7ff ff89 	bl	8000210 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);
 80002fe:	2006      	movs	r0, #6
 8000300:	f7ff ff68 	bl	80001d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000304:	b662      	cpsie	i
}
 8000306:	bf00      	nop

    // Re-enable interrupts
    __enable_irq();
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000020 	.word	0x20000020
 8000314:	40021000 	.word	0x40021000
 8000318:	48001002 	.word	0x48001002
 800031c:	48001015 	.word	0x48001015
 8000320:	2000001c 	.word	0x2000001c
 8000324:	40010000 	.word	0x40010000
 8000328:	40010400 	.word	0x40010400

0800032c <DigitalIO_SetButtonCallback>:

/**
 * @brief Set the button press callback function
 */
void DigitalIO_SetButtonCallback(ButtonCallback callback) {
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
    buttonCallback = callback;
 8000334:	4a04      	ldr	r2, [pc, #16]	@ (8000348 <DigitalIO_SetButtonCallback+0x1c>)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	6013      	str	r3, [r2, #0]
}
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	20000020 	.word	0x20000020

0800034c <DigitalIO_SetLED>:

/**
 * @brief Set the state of a specific LED
 */
void DigitalIO_SetLED(uint8_t ledNumber, uint8_t state) {
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	460a      	mov	r2, r1
 8000356:	71fb      	strb	r3, [r7, #7]
 8000358:	4613      	mov	r3, r2
 800035a:	71bb      	strb	r3, [r7, #6]
    // Validate LED number (0-7)
    if (ledNumber > 7)
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	2b07      	cmp	r3, #7
 8000360:	d826      	bhi.n	80003b0 <DigitalIO_SetLED+0x64>
        return;

    // Update LED state in our internal variable
    if (state)
 8000362:	79bb      	ldrb	r3, [r7, #6]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d00d      	beq.n	8000384 <DigitalIO_SetLED+0x38>
        ledStates |= (1 << ledNumber); // Set bit
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	2201      	movs	r2, #1
 800036c:	fa02 f303 	lsl.w	r3, r2, r3
 8000370:	b25a      	sxtb	r2, r3
 8000372:	4b12      	ldr	r3, [pc, #72]	@ (80003bc <DigitalIO_SetLED+0x70>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	b25b      	sxtb	r3, r3
 8000378:	4313      	orrs	r3, r2
 800037a:	b25b      	sxtb	r3, r3
 800037c:	b2da      	uxtb	r2, r3
 800037e:	4b0f      	ldr	r3, [pc, #60]	@ (80003bc <DigitalIO_SetLED+0x70>)
 8000380:	701a      	strb	r2, [r3, #0]
 8000382:	e00e      	b.n	80003a2 <DigitalIO_SetLED+0x56>
    else
        ledStates &= ~(1 << ledNumber); // Clear bit
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	2201      	movs	r2, #1
 8000388:	fa02 f303 	lsl.w	r3, r2, r3
 800038c:	b25b      	sxtb	r3, r3
 800038e:	43db      	mvns	r3, r3
 8000390:	b25a      	sxtb	r2, r3
 8000392:	4b0a      	ldr	r3, [pc, #40]	@ (80003bc <DigitalIO_SetLED+0x70>)
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	b25b      	sxtb	r3, r3
 8000398:	4013      	ands	r3, r2
 800039a:	b25b      	sxtb	r3, r3
 800039c:	b2da      	uxtb	r2, r3
 800039e:	4b07      	ldr	r3, [pc, #28]	@ (80003bc <DigitalIO_SetLED+0x70>)
 80003a0:	701a      	strb	r2, [r3, #0]

    // Update the physical LED register
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80003a2:	4b07      	ldr	r3, [pc, #28]	@ (80003c0 <DigitalIO_SetLED+0x74>)
 80003a4:	60fb      	str	r3, [r7, #12]
    *led_register = ledStates;
 80003a6:	4b05      	ldr	r3, [pc, #20]	@ (80003bc <DigitalIO_SetLED+0x70>)
 80003a8:	781a      	ldrb	r2, [r3, #0]
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	701a      	strb	r2, [r3, #0]
 80003ae:	e000      	b.n	80003b2 <DigitalIO_SetLED+0x66>
        return;
 80003b0:	bf00      	nop
}
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	2000001c 	.word	0x2000001c
 80003c0:	48001015 	.word	0x48001015

080003c4 <DigitalIO_GetLEDState>:

/**
 * @brief Get the state of a specific LED
 */
uint8_t DigitalIO_GetLEDState(uint8_t ledNumber) {
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]
    // Validate LED number (0-7)
    if (ledNumber > 7)
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	2b07      	cmp	r3, #7
 80003d2:	d901      	bls.n	80003d8 <DigitalIO_GetLEDState+0x14>
        return 0;
 80003d4:	2300      	movs	r3, #0
 80003d6:	e009      	b.n	80003ec <DigitalIO_GetLEDState+0x28>

    // Return the state from our internal variable
    return (ledStates & (1 << ledNumber)) ? 1 : 0;
 80003d8:	4b07      	ldr	r3, [pc, #28]	@ (80003f8 <DigitalIO_GetLEDState+0x34>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	461a      	mov	r2, r3
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	fa42 f303 	asr.w	r3, r2, r3
 80003e4:	b2db      	uxtb	r3, r3
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	b2db      	uxtb	r3, r3
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	2000001c 	.word	0x2000001c

080003fc <DigitalIO_SetLEDPattern>:

/**
 * @brief Set all LEDs according to a pattern
 */
void DigitalIO_SetLEDPattern(uint8_t pattern) {
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]
    // Update our internal record of all LED states
    ledStates = pattern;
 8000406:	4a07      	ldr	r2, [pc, #28]	@ (8000424 <DigitalIO_SetLEDPattern+0x28>)
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	7013      	strb	r3, [r2, #0]

    // Update the hardware register directly
    uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800040c:	4b06      	ldr	r3, [pc, #24]	@ (8000428 <DigitalIO_SetLEDPattern+0x2c>)
 800040e:	60fb      	str	r3, [r7, #12]
    *led_register = pattern;
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	79fa      	ldrb	r2, [r7, #7]
 8000414:	701a      	strb	r2, [r3, #0]
}
 8000416:	bf00      	nop
 8000418:	3714      	adds	r7, #20
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	2000001c 	.word	0x2000001c
 8000428:	48001015 	.word	0x48001015

0800042c <DigitalIO_GetLEDPattern>:

/**
 * @brief Get the current pattern of all LEDs
 */
uint8_t DigitalIO_GetLEDPattern(void) {
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
    return ledStates;
 8000430:	4b03      	ldr	r3, [pc, #12]	@ (8000440 <DigitalIO_GetLEDPattern+0x14>)
 8000432:	781b      	ldrb	r3, [r3, #0]
}
 8000434:	4618      	mov	r0, r3
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	2000001c 	.word	0x2000001c

08000444 <EXTI0_IRQHandler>:
/**
 * @brief EXTI0 interrupt handler for button press
 *
 * This function must be defined in the global scope as it's an interrupt handler
 */
void EXTI0_IRQHandler(void) {
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
    // Check if EXTI0 interrupt occurred
    if (EXTI->PR & EXTI_PR_PR0) {
 8000448:	4b0a      	ldr	r3, [pc, #40]	@ (8000474 <EXTI0_IRQHandler+0x30>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	f003 0301 	and.w	r3, r3, #1
 8000450:	2b00      	cmp	r3, #0
 8000452:	d00c      	beq.n	800046e <EXTI0_IRQHandler+0x2a>
        // Call the callback function if registered
        if (buttonCallback != NULL) {
 8000454:	4b08      	ldr	r3, [pc, #32]	@ (8000478 <EXTI0_IRQHandler+0x34>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d002      	beq.n	8000462 <EXTI0_IRQHandler+0x1e>
            buttonCallback();
 800045c:	4b06      	ldr	r3, [pc, #24]	@ (8000478 <EXTI0_IRQHandler+0x34>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4798      	blx	r3
        }

        // Clear the interrupt flag
        EXTI->PR |= EXTI_PR_PR0;
 8000462:	4b04      	ldr	r3, [pc, #16]	@ (8000474 <EXTI0_IRQHandler+0x30>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a03      	ldr	r2, [pc, #12]	@ (8000474 <EXTI0_IRQHandler+0x30>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6153      	str	r3, [r2, #20]
    }
}
 800046e:	bf00      	nop
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40010400 	.word	0x40010400
 8000478:	20000020 	.word	0x20000020

0800047c <chase_led>:
#if !defined(SOFT_FP) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

// First callback function - shifts the pattern left
void chase_led(void) {
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
    // Get current LED pattern from the module
    uint8_t current_pattern = DigitalIO_GetLEDPattern();
 8000482:	f7ff ffd3 	bl	800042c <DigitalIO_GetLEDPattern>
 8000486:	4603      	mov	r3, r0
 8000488:	71fb      	strb	r3, [r7, #7]

    // Shift left by 1
    current_pattern <<= 1;
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	71fb      	strb	r3, [r7, #7]

    // If all LEDs are off, turn on the first one
    if (current_pattern == 0) {
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d101      	bne.n	800049a <chase_led+0x1e>
        current_pattern = 1;
 8000496:	2301      	movs	r3, #1
 8000498:	71fb      	strb	r3, [r7, #7]
    }

    // Update all LEDs at once
    DigitalIO_SetLEDPattern(current_pattern);
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff ffad 	bl	80003fc <DigitalIO_SetLEDPattern>
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}

080004aa <toggle_pattern>:

// Second callback function - toggles every other LED
void toggle_pattern(void) {
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b082      	sub	sp, #8
 80004ae:	af00      	add	r7, sp, #0
    // Get current pattern
    uint8_t current_pattern = DigitalIO_GetLEDPattern();
 80004b0:	f7ff ffbc 	bl	800042c <DigitalIO_GetLEDPattern>
 80004b4:	4603      	mov	r3, r0
 80004b6:	71fb      	strb	r3, [r7, #7]

    // If pattern is 0x55 or 0xAA, flip it
    // Otherwise set to 0x55
    if (current_pattern == 0x55) {
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	2b55      	cmp	r3, #85	@ 0x55
 80004bc:	d103      	bne.n	80004c6 <toggle_pattern+0x1c>
        DigitalIO_SetLEDPattern(0xAA);
 80004be:	20aa      	movs	r0, #170	@ 0xaa
 80004c0:	f7ff ff9c 	bl	80003fc <DigitalIO_SetLEDPattern>
    } else if (current_pattern == 0xAA) {
        DigitalIO_SetLEDPattern(0x55);
    } else {
        DigitalIO_SetLEDPattern(0x55);
    }
}
 80004c4:	e009      	b.n	80004da <toggle_pattern+0x30>
    } else if (current_pattern == 0xAA) {
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2baa      	cmp	r3, #170	@ 0xaa
 80004ca:	d103      	bne.n	80004d4 <toggle_pattern+0x2a>
        DigitalIO_SetLEDPattern(0x55);
 80004cc:	2055      	movs	r0, #85	@ 0x55
 80004ce:	f7ff ff95 	bl	80003fc <DigitalIO_SetLEDPattern>
}
 80004d2:	e002      	b.n	80004da <toggle_pattern+0x30>
        DigitalIO_SetLEDPattern(0x55);
 80004d4:	2055      	movs	r0, #85	@ 0x55
 80004d6:	f7ff ff91 	bl	80003fc <DigitalIO_SetLEDPattern>
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <main>:

int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
    // Initialize with first callback
    DigitalIO_Init(chase_led);
 80004ea:	4823      	ldr	r0, [pc, #140]	@ (8000578 <main+0x94>)
 80004ec:	f7ff feba 	bl	8000264 <DigitalIO_Init>

    // Turn on first LED initially
    DigitalIO_SetLED(0, 1);
 80004f0:	2101      	movs	r1, #1
 80004f2:	2000      	movs	r0, #0
 80004f4:	f7ff ff2a 	bl	800034c <DigitalIO_SetLED>

    uint32_t counter = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]

    /* Loop forever */
    for(;;) {
        // Demonstrate state retrieval every second
        if (counter % 1000000 == 0) {
 80004fc:	68fa      	ldr	r2, [r7, #12]
 80004fe:	4b1f      	ldr	r3, [pc, #124]	@ (800057c <main+0x98>)
 8000500:	fba3 1302 	umull	r1, r3, r3, r2
 8000504:	0c9b      	lsrs	r3, r3, #18
 8000506:	491e      	ldr	r1, [pc, #120]	@ (8000580 <main+0x9c>)
 8000508:	fb01 f303 	mul.w	r3, r1, r3
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	2b00      	cmp	r3, #0
 8000510:	d110      	bne.n	8000534 <main+0x50>
            // Get the state of LED 3
            uint8_t led3_state = DigitalIO_GetLEDState(3);
 8000512:	2003      	movs	r0, #3
 8000514:	f7ff ff56 	bl	80003c4 <DigitalIO_GetLEDState>
 8000518:	4603      	mov	r3, r0
 800051a:	72fb      	strb	r3, [r7, #11]

            // Mirror LED 3's state to LED 7 (to demonstrate getters/setters)
            // If LED 3 is on, also turn on LED 7
            if (led3_state) {
 800051c:	7afb      	ldrb	r3, [r7, #11]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d004      	beq.n	800052c <main+0x48>
                DigitalIO_SetLED(7, 1);
 8000522:	2101      	movs	r1, #1
 8000524:	2007      	movs	r0, #7
 8000526:	f7ff ff11 	bl	800034c <DigitalIO_SetLED>
 800052a:	e003      	b.n	8000534 <main+0x50>
            } else {
                DigitalIO_SetLED(7, 0);
 800052c:	2100      	movs	r1, #0
 800052e:	2007      	movs	r0, #7
 8000530:	f7ff ff0c 	bl	800034c <DigitalIO_SetLED>
            }
        }

        // Count to ~5 seconds then change the callback
        counter++;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3301      	adds	r3, #1
 8000538:	60fb      	str	r3, [r7, #12]
        if (counter == 5000000) {
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	4a11      	ldr	r2, [pc, #68]	@ (8000584 <main+0xa0>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d1dc      	bne.n	80004fc <main+0x18>
            // After ~5 seconds, change to the second callback
            DigitalIO_SetButtonCallback(toggle_pattern);
 8000542:	4811      	ldr	r0, [pc, #68]	@ (8000588 <main+0xa4>)
 8000544:	f7ff fef2 	bl	800032c <DigitalIO_SetButtonCallback>

            // Get current pattern and invert it to demonstrate pattern retrieval
            uint8_t current_pattern = DigitalIO_GetLEDPattern();
 8000548:	f7ff ff70 	bl	800042c <DigitalIO_GetLEDPattern>
 800054c:	4603      	mov	r3, r0
 800054e:	72bb      	strb	r3, [r7, #10]
            DigitalIO_SetLEDPattern(~current_pattern);
 8000550:	7abb      	ldrb	r3, [r7, #10]
 8000552:	43db      	mvns	r3, r3
 8000554:	b2db      	uxtb	r3, r3
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff ff50 	bl	80003fc <DigitalIO_SetLEDPattern>

            for(volatile uint32_t i = 0; i < 500000; i++);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	e002      	b.n	8000568 <main+0x84>
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	3301      	adds	r3, #1
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a08      	ldr	r2, [pc, #32]	@ (800058c <main+0xa8>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d9f8      	bls.n	8000562 <main+0x7e>

            // Reset counter
            counter = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	60fb      	str	r3, [r7, #12]
        if (counter % 1000000 == 0) {
 8000574:	e7c2      	b.n	80004fc <main+0x18>
 8000576:	bf00      	nop
 8000578:	0800047d 	.word	0x0800047d
 800057c:	431bde83 	.word	0x431bde83
 8000580:	000f4240 	.word	0x000f4240
 8000584:	004c4b40 	.word	0x004c4b40
 8000588:	080004ab 	.word	0x080004ab
 800058c:	0007a11f 	.word	0x0007a11f

08000590 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000590:	480d      	ldr	r0, [pc, #52]	@ (80005c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000592:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000594:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000598:	480c      	ldr	r0, [pc, #48]	@ (80005cc <LoopForever+0x6>)
  ldr r1, =_edata
 800059a:	490d      	ldr	r1, [pc, #52]	@ (80005d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800059c:	4a0d      	ldr	r2, [pc, #52]	@ (80005d4 <LoopForever+0xe>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a0:	e002      	b.n	80005a8 <LoopCopyDataInit>

080005a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a6:	3304      	adds	r3, #4

080005a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ac:	d3f9      	bcc.n	80005a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ae:	4a0a      	ldr	r2, [pc, #40]	@ (80005d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b0:	4c0a      	ldr	r4, [pc, #40]	@ (80005dc <LoopForever+0x16>)
  movs r3, #0
 80005b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b4:	e001      	b.n	80005ba <LoopFillZerobss>

080005b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b8:	3204      	adds	r2, #4

080005ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005bc:	d3fb      	bcc.n	80005b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005be:	f000 f811 	bl	80005e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005c2:	f7ff ff8f 	bl	80004e4 <main>

080005c6 <LoopForever>:

LoopForever:
  b LoopForever
 80005c6:	e7fe      	b.n	80005c6 <LoopForever>
  ldr   r0, =_estack
 80005c8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80005cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80005d4:	0800064c 	.word	0x0800064c
  ldr r2, =_sbss
 80005d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80005dc:	20000024 	.word	0x20000024

080005e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e0:	e7fe      	b.n	80005e0 <ADC1_2_IRQHandler>
	...

080005e4 <__libc_init_array>:
 80005e4:	b570      	push	{r4, r5, r6, lr}
 80005e6:	4d0d      	ldr	r5, [pc, #52]	@ (800061c <__libc_init_array+0x38>)
 80005e8:	4c0d      	ldr	r4, [pc, #52]	@ (8000620 <__libc_init_array+0x3c>)
 80005ea:	1b64      	subs	r4, r4, r5
 80005ec:	10a4      	asrs	r4, r4, #2
 80005ee:	2600      	movs	r6, #0
 80005f0:	42a6      	cmp	r6, r4
 80005f2:	d109      	bne.n	8000608 <__libc_init_array+0x24>
 80005f4:	4d0b      	ldr	r5, [pc, #44]	@ (8000624 <__libc_init_array+0x40>)
 80005f6:	4c0c      	ldr	r4, [pc, #48]	@ (8000628 <__libc_init_array+0x44>)
 80005f8:	f000 f818 	bl	800062c <_init>
 80005fc:	1b64      	subs	r4, r4, r5
 80005fe:	10a4      	asrs	r4, r4, #2
 8000600:	2600      	movs	r6, #0
 8000602:	42a6      	cmp	r6, r4
 8000604:	d105      	bne.n	8000612 <__libc_init_array+0x2e>
 8000606:	bd70      	pop	{r4, r5, r6, pc}
 8000608:	f855 3b04 	ldr.w	r3, [r5], #4
 800060c:	4798      	blx	r3
 800060e:	3601      	adds	r6, #1
 8000610:	e7ee      	b.n	80005f0 <__libc_init_array+0xc>
 8000612:	f855 3b04 	ldr.w	r3, [r5], #4
 8000616:	4798      	blx	r3
 8000618:	3601      	adds	r6, #1
 800061a:	e7f2      	b.n	8000602 <__libc_init_array+0x1e>
 800061c:	08000644 	.word	0x08000644
 8000620:	08000644 	.word	0x08000644
 8000624:	08000644 	.word	0x08000644
 8000628:	08000648 	.word	0x08000648

0800062c <_init>:
 800062c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800062e:	bf00      	nop
 8000630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000632:	bc08      	pop	{r3}
 8000634:	469e      	mov	lr, r3
 8000636:	4770      	bx	lr

08000638 <_fini>:
 8000638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063a:	bf00      	nop
 800063c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800063e:	bc08      	pop	{r3}
 8000640:	469e      	mov	lr, r3
 8000642:	4770      	bx	lr
